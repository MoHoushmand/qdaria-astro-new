---
import { type CollectionEntry } from "astro:content";
import { getRelativeLocaleUrl } from "astro:i18n";
import BaseLayout from "./BaseLayout.astro";
import Button from "../components/Button/Button.astro";
import Category from "../components/Category/Category.astro";
import { formatDate } from "../js/textUtils";
import { getLocaleFromUrl } from "../js/localeUtils";
import { useTranslations } from "../js/translationUtils";

interface Props {
  post: CollectionEntry<"blog">;
  headings?: { depth: number; slug: string; text: string }[];
}

const { post } = Astro.props;
const { title, description, categories, pubDate, updatedDate, heroImage } = post.data;
const currLocale = getLocaleFromUrl(Astro.url);
const t = useTranslations({ url: Astro.url, locals: { locale: currLocale } });
---

<BaseLayout type="blog" title={title} description={description} image={typeof heroImage === 'string' ? heroImage : heroImage.src}>
  <article class="site-container mt-20 md:mt-28">
    <div class="mx-auto max-w-[800px]">
      <div class="text-center">
        <div class="flex justify-center gap-3 md:text-lg">
          {categories.map((category: string) => (
            <div class="inline-block">
              <Category category={category} />
            </div>
          ))}
        </div>

        <h1 class="h2 mt-4">{title}</h1>

        <div class="mt-2 flex justify-center gap-3">
          <time datetime={pubDate.toISOString()}>
            {formatDate(pubDate, currLocale)}
          </time>
        </div>
      </div>

      <div class="mt-6 overflow-hidden rounded-xl border border-base-300 dark:border-base-700">
        <img
          src={typeof heroImage === 'string' ? heroImage : heroImage.src}
          alt={`Cover for ${title}`}
          width={typeof heroImage === 'string' ? 2000 : heroImage.width}
          height={typeof heroImage === 'string' ? 1000 : heroImage.height}
          class="max-h-[70vh] w-full object-cover"
        />
      </div>

      <div class="mt-10">
        {updatedDate && (
          <div class="mb-6 italic">
            <time datetime={updatedDate.toISOString()}>
              {t("updated")}: {formatDate(updatedDate, currLocale)}
            </time>
          </div>
        )}

        <div class="prose mx-auto">
          <slot />
        </div>

        <div class="mt-16 flex justify-center">
          <Button variant="outline" arrow="left" href={getRelativeLocaleUrl(currLocale, "/blog")}>
            {t("back_to_all_posts")}
          </Button>
        </div>
      </div>
    </div>
  </article>
</BaseLayout>
