---
import type { navItem } from "@config/types/configDataTypes";
import { isNavDropdownItem } from "@config/types/configDataTypes";

interface Props {
  navItem: navItem;
}

const { navItem } = Astro.props;
---

<div class="nav-dropdown relative group">
  <button
    type="button"
    class="nav-item inline-flex items-center gap-2 nav-dropdown-toggle"
    aria-expanded="false"
    data-dropdown-toggle
  >
    <span>{navItem.text}</span>
    <svg
      class="h-4 w-4 text-base-400 transition-transform md:group-hover:rotate-180"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"
      />
    </svg>
  </button>

  <div class="nav-dropdown-panel absolute left-0 top-full z-10 mt-1 hidden w-max min-w-[240px] origin-top-left opacity-0 transition-all duration-200 md:group-hover:block md:group-hover:opacity-100" aria-hidden="true">
    <div class="rounded-xl border border-primary-500/30 bg-dark-bg p-2 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
      <div class="py-1">
        {isNavDropdownItem(navItem) && navItem.dropdown.map((item) => (
          <div class="relative group/sub">
            {isNavDropdownItem(item) ? (
              <>
                <button
                  type="button"
                  class="nav-dropdown-item flex w-full items-center justify-between nav-dropdown-toggle"
                  aria-expanded="false"
                  data-dropdown-toggle
                >
                  <div>
                    <div class="font-medium">{item.text}</div>
                    {item.description && (
                      <div class="text-xs text-base-400">{item.description}</div>
                    )}
                  </div>
                  <svg
                    class="ml-2 h-4 w-4 text-base-400 transition-transform group-hover/sub:translate-x-1"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </button>
                <div class="nav-dropdown-sub absolute left-full top-0 hidden min-w-[240px] pl-2 md:group-hover/sub:block" aria-hidden="true">
                  <div class="rounded-xl border border-primary-500/30 bg-dark-bg p-2 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <div class="py-1">
                      {isNavDropdownItem(item) && item.dropdown.map((child) => (
                        <a
                          href={child.link}
                          class="nav-dropdown-item flex w-full items-start"
                        >
                          <div>
                            <div class="font-medium">{child.text}</div>
                            {child.description && (
                              <div class="text-xs text-base-400">{child.description}</div>
                            )}
                          </div>
                        </a>
                      ))}
                    </div>
                  </div>
                </div>
              </>
            ) : (
              <a
                href={item.link}
                class="nav-dropdown-item flex w-full items-start"
              >
                <div>
                  <div class="font-medium">{item.text}</div>
                  {item.description && (
                    <div class="text-xs text-base-400">{item.description}</div>
                  )}
                </div>
              </a>
            )}
          </div>
        ))}
      </div>
    </div>
  </div>
</div>

<style>
  /* Desktop styles */
  @media (min-width: 768px) {
    .nav-dropdown-panel {
      @apply transform;
      animation: fadeIn 0.2s ease-out;
    }

    .nav-dropdown-sub {
      @apply transform;
      animation: fadeIn 0.2s ease-out;
    }
  }

  /* Mobile styles */
  @media (max-width: 767px) {
    .nav-dropdown-panel,
    .nav-dropdown-sub {
      @apply block transform opacity-0;
      transition: opacity 0.2s ease-out;
    }

    .nav-dropdown-panel[aria-hidden="false"],
    .nav-dropdown-sub[aria-hidden="false"] {
      @apply opacity-100;
    }

    /* Position sub-dropdowns below on mobile instead of to the side */
    .nav-dropdown-sub {
      @apply left-0 top-full pl-4;
      position: relative !important;
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .nav-dropdown-item {
    @apply rounded-lg px-4 py-2 text-sm text-base-200 transition-all hover:bg-primary-500/10;
  }
</style>

<script>
  function handleDropdownToggle(e: Event) {
    if (window.innerWidth >= 768) return; // Only handle clicks on mobile
    
    const button = e.currentTarget as HTMLButtonElement;
    const panel = button.nextElementSibling as HTMLElement;
    if (!panel) return;
    
    e.preventDefault();
    e.stopPropagation();
    
    const isExpanded = button.getAttribute('aria-expanded') === 'true';
    
    // Close other dropdowns at the same level
    const parent = button.closest('.nav-dropdown')?.parentElement;
    if (parent) {
      parent.querySelectorAll<HTMLButtonElement>('[data-dropdown-toggle][aria-expanded="true"]').forEach(otherButton => {
        if (otherButton !== button) {
          otherButton.setAttribute('aria-expanded', 'false');
          const otherPanel = otherButton.nextElementSibling as HTMLElement;
          if (otherPanel) {
            otherPanel.setAttribute('aria-hidden', 'true');
          }
        }
      });
    }

    // Toggle current dropdown
    button.setAttribute('aria-expanded', (!isExpanded).toString());
    panel.setAttribute('aria-hidden', isExpanded.toString());

    // Handle sub-dropdowns
    if (isExpanded) {
      panel.querySelectorAll<HTMLButtonElement>('[data-dropdown-toggle][aria-expanded="true"]').forEach(subButton => {
        subButton.setAttribute('aria-expanded', 'false');
        const subPanel = subButton.nextElementSibling as HTMLElement;
        if (subPanel) {
          subPanel.setAttribute('aria-hidden', 'true');
        }
      });
    }
  }

  // Initialize dropdowns
  function initDropdowns() {
    document.querySelectorAll<HTMLButtonElement>('[data-dropdown-toggle]').forEach(button => {
      button.addEventListener('click', handleDropdownToggle);
    });
  }

  // Close dropdowns when clicking outside
  document.addEventListener('click', (e: MouseEvent) => {
    if (window.innerWidth >= 768) return; // Only handle clicks on mobile
    
    const target = e.target as HTMLElement;
    if (!target.closest('.nav-dropdown')) {
      document.querySelectorAll<HTMLButtonElement>('[data-dropdown-toggle]').forEach(button => {
        button.setAttribute('aria-expanded', 'false');
        const panel = button.nextElementSibling as HTMLElement;
        if (panel) {
          panel.setAttribute('aria-hidden', 'true');
          // Also close any open sub-dropdowns
          panel.querySelectorAll<HTMLButtonElement>('[data-dropdown-toggle][aria-expanded="true"]').forEach(subButton => {
            subButton.setAttribute('aria-expanded', 'false');
            const subPanel = subButton.nextElementSibling as HTMLElement;
            if (subPanel) {
              subPanel.setAttribute('aria-hidden', 'true');
            }
          });
        }
      });
    }
  });

  // Initialize on page load
  initDropdowns();

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:page-load', initDropdowns);
  document.addEventListener('astro:after-swap', initDropdowns);
</script>
