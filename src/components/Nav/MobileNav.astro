---
import NavLink from "./NavLink.astro";
import type { navItem } from "../../config/types/configDataTypes";

interface Props {
  navData: navItem[];
}

const { navData } = Astro.props;
---

<div
  id="mobile-nav"
  class="mobile-nav fixed left-0 top-14 z-20 h-[calc(100vh-3.5rem)] w-full overflow-y-auto bg-dark-bg/95 backdrop-blur md:hidden"
  aria-hidden="true"
>
  <nav class="site-container py-8">
    <ul class="flex flex-col gap-2">
      {
        navData.map((navItem: navItem) => (
          <li>
            {/* If navItem has a dropdown, treat it as a parent menu item */}
            {"dropdown" in navItem ? (
              <div class="mobile-dropdown">
                <button
                  type="button"
                  class="mobile-dropdown-toggle flex w-full items-center justify-between rounded-lg px-3 py-2 text-base-200 transition-all hover:bg-base-800"
                  aria-expanded="false"
                  onclick="this.setAttribute('aria-expanded', this.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'); this.nextElementSibling.classList.toggle('show')"
                >
                  <span>{navItem.text}</span>
                  <svg
                    class="h-5 w-5 transform transition-transform"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                </button>

                <div class="mobile-dropdown-content hidden pl-4">
                  {navItem.dropdown?.map((dropdownItem: navItem) =>
                    !("dropdown" in dropdownItem) ? (
                      // If it's a direct link
                      <NavLink navItem={dropdownItem} />
                    ) : (
                      // If there's a sub-layer of children
                      <div class="mb-2">
                        <button
                          type="button"
                          class="mobile-dropdown-toggle flex w-full items-center justify-between px-3 py-2 text-sm font-semibold text-base-400"
                          aria-expanded="false"
                          onclick="this.setAttribute('aria-expanded', this.getAttribute('aria-expanded') === 'true' ? 'false' : 'true'); this.nextElementSibling.classList.toggle('show')"
                        >
                          <span>{dropdownItem.text}</span>
                          <svg
                            class="h-4 w-4 transform transition-transform"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                          >
                            <path
                              stroke-linecap="round"
                              stroke-linejoin="round"
                              stroke-width="2"
                              d="M19 9l-7 7-7-7"
                            />
                          </svg>
                        </button>
                        <div class="mobile-dropdown-content hidden pl-4">
                          {dropdownItem.dropdown?.map((child: navItem) => (
                            <NavLink navItem={child} />
                          ))}
                        </div>
                      </div>
                    )
                  )}
                </div>
              </div>
            ) : (
              // If navItem has no dropdown, just a direct link
              <NavLink navItem={navItem} />
            )}
          </li>
        ))
      }
    </ul>
  </nav>
</div>

<style>
  .mobile-nav {
    opacity: 0;
    pointer-events: none;
    transform: translateY(-1rem);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    visibility: hidden;
  }

  .mobile-nav[aria-hidden="false"] {
    opacity: 1;
    pointer-events: auto;
    transform: translateY(0);
    visibility: visible;
  }

  .mobile-dropdown-toggle svg {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .mobile-dropdown-toggle[aria-expanded="true"] svg {
    transform: rotate(180deg);
  }

  .mobile-dropdown-content {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .mobile-dropdown-content.show {
    display: block;
  }
</style>
