---
interface Props {
  width?: number;
  height?: number;
  className?: string;
}

const { width = 800, height = 600, className = '' } = Astro.props;
---

<div id="quantum-circuit" class={`quantum-circuit ${className}`} data-aos="fade-in">
  <canvas id="quantum-canvas"></canvas>
</div>

<script>
  import * as THREE from 'three';
  import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  class QuantumCircuit {
    scene: THREE.Scene;
    camera: THREE.PerspectiveCamera;
    renderer: THREE.WebGLRenderer;
    controls: OrbitControls;

    constructor() {
      this.scene = new THREE.Scene();
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      this.renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#quantum-canvas'),
        antialias: true,
        alpha: true
      });
      
      this.init();
      this.animate();
    }

    init() {
      // Setup renderer
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.renderer.setPixelRatio(window.devicePixelRatio);
      
      // Setup camera
      this.camera.position.z = 5;
      
      // Add lights
      const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
      const pointLight = new THREE.PointLight(0xffffff, 1);
      pointLight.position.set(5, 5, 5);
      this.scene.add(ambientLight, pointLight);

      // Create quantum gate geometry
      this.createQuantumGates();
      
      // Add controls
      this.controls = new OrbitControls(this.camera, this.renderer.domElement);
      this.controls.enableDamping = true;
      
      // Handle resize
      window.addEventListener('resize', () => this.onWindowResize());
      
      // Add scroll animation
      this.setupScrollAnimation();
    }

    createQuantumGates() {
      // Create gates
      const gateGeometry = new THREE.BoxGeometry(1, 1, 1);
      const gateMaterial = new THREE.MeshPhongMaterial({
        color: 0x00ff88,
        transparent: true,
        opacity: 0.8,
        side: THREE.DoubleSide
      });

      // Create multiple gates
      for (let i = 0; i < 3; i++) {
        const gate = new THREE.Mesh(gateGeometry, gateMaterial);
        gate.position.x = (i - 1) * 2;
        this.scene.add(gate);
        
        // Add connection lines
        if (i > 0) {
          const lineMaterial = new THREE.LineBasicMaterial({ color: 0x00ff88 });
          const points = [];
          points.push(new THREE.Vector3((i - 2) * 2, 0, 0));
          points.push(new THREE.Vector3((i - 1) * 2, 0, 0));
          const lineGeometry = new THREE.BufferGeometry().setFromPoints(points);
          const line = new THREE.Line(lineGeometry, lineMaterial);
          this.scene.add(line);
        }
      }
    }

    setupScrollAnimation() {
      ScrollTrigger.create({
        trigger: "#quantum-circuit",
        start: "top center",
        end: "bottom center",
        onEnter: () => {
          gsap.to(this.scene.rotation, {
            y: Math.PI * 2,
            duration: 2,
            ease: "power2.inOut"
          });
        },
        onLeaveBack: () => {
          gsap.to(this.scene.rotation, {
            y: 0,
            duration: 2,
            ease: "power2.inOut"
          });
        }
      });
    }

    onWindowResize() {
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      this.renderer.setSize(window.innerWidth, window.innerHeight);
    }

    animate() {
      requestAnimationFrame(() => this.animate());
      
      this.controls.update();
      
      // Add subtle rotation
      this.scene.rotation.y += 0.001;
      
      this.renderer.render(this.scene, this.camera);
    }
  }

  // Initialize when the component mounts
  const init = () => {
    try {
      new QuantumCircuit();
    } catch (error) {
      console.error('Error initializing QuantumCircuit:', error);
    }
  };

  // Wait for DOM content to be loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
</script>

<style>
.quantum-circuit {
  width: 100%;
  height: 100%;
  min-height: 600px;
  position: relative;
}

#quantum-canvas {
  width: 100% !important;
  height: 100% !important;
  position: absolute;
  top: 0;
  left: 0;
}
</style>
