---
import ApexChartWrapper from './ApexChartWrapper.astro';
import type { BaseChartProps } from '../../../types/chart';

interface Company {
  name: string;
  category: string;
  MarketShare: number;
  GrowthRate: number;
  Revenue: number;
  description?: string;
  founded?: string;
  headquarters?: string;
  employees?: number;
  funding?: number;
}

interface Props extends BaseChartProps {
  className?: string;
  height?: number;
  width?: string;
  darkMode?: boolean;
  highContrastMode?: boolean;
  companies?: Company[];
  metrics?: string[];
  colors?: string[];
  categories?: string[];
  showQuadrants?: boolean;
}

const { 
  id = `market-positioning-chart-${Math.random().toString(36).substring(2, 9)}`,
  title = "Quantum Computing Market Positioning", 
  description = "Bubble chart showing market positioning of quantum computing companies based on market share, growth rate, and revenue.",
  className = "",
  height = 500,
  width = "100%",
  darkMode = true,
  highContrastMode = false,
  companies,
  metrics = ['MarketShare', 'GrowthRate', 'Revenue'],
  colors,
  categories,
  showQuadrants = true
} = Astro.props;

// Create a unique ID for the chart
const chartId = id;
const dataTableId = `${chartId}-data-table`;
const quadrantToggleId = `${chartId}-quadrant-toggle`;
const categoryFilterId = `${chartId}-category-filter`;
const companySearchId = `${chartId}-company-search`;

// Worker path for data processing
const workerPath = "/charts/marketPositioningWorker.js";
---

<ApexChartWrapper
  id={chartId}
  title={title}
  description={description}
  className={className}
  height={height}
  width={width}
  darkMode={darkMode}
  highContrastMode={highContrastMode}
  dataTableId={dataTableId}
>
  <!-- Chart Controls -->
  <div class="chart-controls mb-4 flex flex-wrap gap-4">
    <!-- Quadrant Toggle -->
    <div class="quadrant-toggle" id={quadrantToggleId}>
      <div class="toggle-label mb-1">Quadrant Lines:</div>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="checkbox" name="showQuadrants" checked={showQuadrants} />
          <span class="toggle-label ml-2">Show</span>
        </label>
      </div>
    </div>
    
    <!-- Category Filter -->
    <div class="category-filter" id={categoryFilterId}>
      <div class="filter-label mb-1">Filter Categories:</div>
      <div class="filter-select">
        <select class="bg-dark-bg text-white border border-primary-500/30 rounded px-2 py-1">
          <option value="all">All Categories</option>
          <!-- Categories will be populated by JavaScript -->
        </select>
      </div>
    </div>
    
    <!-- Company Search -->
    <div class="company-search" id={companySearchId}>
      <div class="search-label mb-1">Search Company:</div>
      <div class="search-input">
        <input type="text" placeholder="Company name..." class="bg-dark-bg text-white border border-primary-500/30 rounded px-2 py-1 w-full" />
      </div>
    </div>
  </div>
  
  <!-- Chart container -->
  <div class="market-chart-container">
    <div class="chart-container"></div>
  </div>
  
  <!-- Quadrant Labels -->
  <div class="quadrant-labels" id="quadrant-labels">
    <div class="quadrant q1">High Growth, Low Market Share<br><span class="text-green-400">Emerging Players</span></div>
    <div class="quadrant q2">High Growth, High Market Share<br><span class="text-blue-400">Market Leaders</span></div>
    <div class="quadrant q3">Low Growth, Low Market Share<br><span class="text-yellow-400">Niche Players</span></div>
    <div class="quadrant q4">Low Growth, High Market Share<br><span class="text-red-400">Established Players</span></div>
  </div>
  
  <!-- Key Metrics -->
  <div class="key-metrics mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="metric market-leader">
      <div class="metric-label">Market Leader</div>
      <div class="metric-value" id="market-leader-value">IBM Quantum</div>
      <div class="metric-detail" id="market-leader-share">Market Share: 18.5%</div>
    </div>
    <div class="metric growth-leader">
      <div class="metric-label">Growth Leader</div>
      <div class="metric-value" id="growth-leader-value">QDaria</div>
      <div class="metric-detail" id="growth-leader-rate">Growth Rate: 85.0%</div>
    </div>
    <div class="metric total-companies">
      <div class="metric-label">Total Companies</div>
      <div class="metric-value" id="total-companies-value">16</div>
    </div>
  </div>
  
  <!-- Quadrant Analysis -->
  <div class="quadrant-analysis mt-6">
    <h3 class="text-lg font-semibold mb-2">Quadrant Analysis</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div class="quadrant-box market-leaders p-4 border border-blue-500/30 rounded-lg bg-dark-bg/50">
        <h4 class="text-blue-400 font-medium mb-2">Market Leaders</h4>
        <p class="text-sm mb-2">High market share, high growth rate</p>
        <ul class="list-disc list-inside text-sm" id="market-leaders-list">
          <!-- List will be populated by JavaScript -->
        </ul>
      </div>
      <div class="quadrant-box emerging-players p-4 border border-green-500/30 rounded-lg bg-dark-bg/50">
        <h4 class="text-green-400 font-medium mb-2">Emerging Players</h4>
        <p class="text-sm mb-2">Low market share, high growth rate</p>
        <ul class="list-disc list-inside text-sm" id="emerging-players-list">
          <!-- List will be populated by JavaScript -->
        </ul>
      </div>
      <div class="quadrant-box established-players p-4 border border-red-500/30 rounded-lg bg-dark-bg/50">
        <h4 class="text-red-400 font-medium mb-2">Established Players</h4>
        <p class="text-sm mb-2">High market share, low growth rate</p>
        <ul class="list-disc list-inside text-sm" id="established-players-list">
          <!-- List will be populated by JavaScript -->
        </ul>
      </div>
      <div class="quadrant-box niche-players p-4 border border-yellow-500/30 rounded-lg bg-dark-bg/50">
        <h4 class="text-yellow-400 font-medium mb-2">Niche Players</h4>
        <p class="text-sm mb-2">Low market share, low growth rate</p>
        <ul class="list-disc list-inside text-sm" id="niche-players-list">
          <!-- List will be populated by JavaScript -->
        </ul>
      </div>
    </div>
  </div>
  
  <!-- Selected Company Details -->
  <div class="company-details mt-6 p-4 border border-primary-500/30 rounded-lg bg-dark-bg/50 hidden" id="company-details">
    <h3 class="text-lg font-semibold mb-2" id="company-name">Company Name</h3>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div>
        <p class="text-sm text-gray-300 mb-1">Category</p>
        <p class="font-medium" id="company-category">Category</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Founded</p>
        <p class="font-medium" id="company-founded">Year</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Market Share</p>
        <p class="font-medium" id="company-market-share">0%</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Growth Rate</p>
        <p class="font-medium" id="company-growth-rate">0%</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Revenue</p>
        <p class="font-medium" id="company-revenue">$0M</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Employees</p>
        <p class="font-medium" id="company-employees">0</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Headquarters</p>
        <p class="font-medium" id="company-headquarters">Location</p>
      </div>
      <div>
        <p class="text-sm text-gray-300 mb-1">Funding</p>
        <p class="font-medium" id="company-funding">$0M</p>
      </div>
      <div class="md:col-span-2">
        <p class="text-sm text-gray-300 mb-1">Description</p>
        <p class="font-medium" id="company-description">Description</p>
      </div>
    </div>
  </div>
  
  <!-- Data table slot -->
  <table slot="data-table" class="chart-data-table-content">
    <thead>
      <tr>
        <th>Company</th>
        <th>Category</th>
        <th>Market Share (%)</th>
        <th>Growth Rate (%)</th>
        <th>Revenue ($M)</th>
        <th>Founded</th>
        <th>Employees</th>
        <th>Funding ($M)</th>
      </tr>
    </thead>
    <tbody id="market-table-body">
      <!-- Table rows will be populated by JavaScript -->
    </tbody>
  </table>
</ApexChartWrapper>

<style>
  .chart-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .toggle-label, .filter-label, .search-label {
    font-weight: bold;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .toggle-option {
    display: flex;
    align-items: center;
    cursor: pointer;
  }
  
  .toggle-option input {
    margin-right: 0.5rem;
    cursor: pointer;
  }
  
  /* Chart Container */
  .market-chart-container {
    position: relative;
    height: 500px;
    margin-bottom: 2rem;
  }
  
  .chart-container {
    width: 100%;
    height: 100%;
  }
  
  /* Quadrant Labels */
  .quadrant-labels {
    display: grid;
    grid-template-columns: 1fr 1fr;
    grid-template-rows: 1fr 1fr;
    gap: 0.5rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
    text-align: center;
    font-size: 0.875rem;
  }
  
  .quadrant {
    padding: 0.5rem;
    border-radius: 0.25rem;
    background: rgba(2, 6, 23, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .q1 {
    border-left: 3px solid #00d085;
  }
  
  .q2 {
    border-left: 3px solid #04a3ff;
  }
  
  .q3 {
    border-left: 3px solid #f5b700;
  }
  
  .q4 {
    border-left: 3px solid #ff6b6b;
  }
  
  /* Key Metrics */
  .key-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
  }
  
  .metric {
    background: rgba(4, 163, 255, 0.1);
    border: 1px solid rgba(4, 163, 255, 0.3);
    border-radius: 0.5rem;
    padding: 1rem;
    text-align: center;
  }
  
  .metric-label {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 0.5rem;
  }
  
  .metric-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
  }
  
  .metric-detail {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin-top: 0.25rem;
  }
  
  .market-leader {
    background: rgba(4, 163, 255, 0.15);
    border-color: rgba(4, 163, 255, 0.4);
  }
  
  .growth-leader {
    background: rgba(0, 255, 211, 0.15);
    border-color: rgba(0, 255, 211, 0.4);
  }
  
  .total-companies {
    background: rgba(245, 183, 0, 0.15);
    border-color: rgba(245, 183, 0, 0.4);
  }
  
  /* Quadrant Analysis */
  .quadrant-analysis {
    margin-top: 1.5rem;
  }
  
  .quadrant-box {
    height: 100%;
  }
  
  .quadrant-box ul {
    max-height: 150px;
    overflow-y: auto;
  }
  
  /* Company Details */
  .company-details {
    margin-top: 1.5rem;
  }
  
  /* Data table styles */
  .chart-data-table-content {
    width: 100%;
    border-collapse: collapse;
    color: white;
    background: rgba(2, 6, 23, 0.7);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .chart-data-table-content th, 
  .chart-data-table-content td {
    padding: 10px;
    text-align: left;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .chart-data-table-content th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  .chart-data-table-content tr:hover {
    background: rgba(4, 163, 255, 0.1);
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .key-metrics {
      grid-template-columns: 1fr;
    }
    
    .quadrant-labels {
      grid-template-columns: 1fr;
      grid-template-rows: repeat(4, auto);
    }
  }
</style>

<script define:vars={{ chartId, companies, metrics, colors, categories, showQuadrants, quadrantToggleId, categoryFilterId, companySearchId, workerPath }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize the chart when ApexCharts is loaded
    if (typeof ApexCharts !== 'undefined') {
      initMarketPositioningChart();
    } else {
      // If ApexCharts is not loaded yet, wait for it
      window.addEventListener('ApexChartsLoaded', initMarketPositioningChart);
    }
    
    // Initialize quadrant toggle
    const quadrantToggle = document.querySelector(`#${quadrantToggleId} input[type="checkbox"]`);
    if (quadrantToggle) {
      quadrantToggle.addEventListener('change', () => {
        updateQuadrantVisibility();
      });
    }
    
    // Initialize company search
    const companySearch = document.querySelector(`#${companySearchId} input[type="text"]`);
    if (companySearch) {
      companySearch.addEventListener('input', () => {
        searchCompany(companySearch.value);
      });
    }
    
    // Function to update quadrant visibility
    function updateQuadrantVisibility() {
      const chart = window[`${chartId}-instance`];
      if (!chart) return;
      
      const showQuadrants = document.querySelector(`#${quadrantToggleId} input[type="checkbox"]`).checked;
      
      // Update chart annotations
      chart.updateOptions({
        annotations: {
          xaxis: showQuadrants ? [{
            x: chart.opts.quadrants.xCenter,
            strokeDashArray: 5,
            borderColor: '#ffffff',
            opacity: 0.3,
            label: {
              borderColor: 'transparent',
              style: {
                color: '#ffffff',
                background: 'transparent'
              },
              text: ''
            }
          }] : [],
          yaxis: showQuadrants ? [{
            y: chart.opts.quadrants.yCenter,
            strokeDashArray: 5,
            borderColor: '#ffffff',
            opacity: 0.3,
            label: {
              borderColor: 'transparent',
              style: {
                color: '#ffffff',
                background: 'transparent'
              },
              text: ''
            }
          }] : []
        }
      });
      
      // Toggle quadrant labels visibility
      const quadrantLabels = document.getElementById('quadrant-labels');
      if (quadrantLabels) {
        quadrantLabels.style.display = showQuadrants ? 'grid' : 'none';
      }
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Quadrant lines ${showQuadrants ? 'shown' : 'hidden'}`;
      }
    }
    
    // Function to search for a company
    function searchCompany(searchTerm) {
      const chart = window[`${chartId}-instance`];
      const chartData = window[`${chartId}-data`];
      if (!chart || !chartData) return;
      
      if (!searchTerm) {
        // If search term is empty, show all companies
        chart.showSeries('all');
        return;
      }
      
      // Convert search term to lowercase for case-insensitive search
      searchTerm = searchTerm.toLowerCase();
      
      // Find matching companies
      const matchingSeries = [];
      
      chartData.series.forEach((series, seriesIndex) => {
        let hasMatch = false;
        
        series.data.forEach((company, dataIndex) => {
          if (company.name.toLowerCase().includes(searchTerm)) {
            hasMatch = true;
            
            // Highlight the matching company
            chart.toggleDataPointSelection(seriesIndex, dataIndex);
          }
        });
        
        if (hasMatch) {
          matchingSeries.push(series.name);
        }
      });
      
      // If no matches found, show all series
      if (matchingSeries.length === 0) {
        chart.showSeries('all');
      } else {
        // Hide all series first
        chart.hideSeries('all');
        
        // Then show only the series with matching companies
        matchingSeries.forEach(seriesName => {
          chart.showSeries(seriesName);
        });
      }
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Filtered to show companies matching "${searchTerm}"`;
      }
    }
    
    // Function to initialize the chart
    function initMarketPositioningChart() {
      // Create a worker for data processing
      const worker = new Worker(workerPath);
      
      // Send data to worker for processing
      worker.postMessage({
        action: 'prepareMarketData',
        companies,
        metrics,
        colors,
        categories
      });
      
      // Handle worker response
      worker.onmessage = function(e) {
        if (e.data.action === 'marketDataReady') {
          const chartData = e.data.chartData;
          renderChart(chartData);
          updateMetrics(chartData);
          populateCategoryFilter(chartData);
          populateQuadrantAnalysis(chartData);
          populateDataTable(chartData);
          
          // Store chart data for later use
          window[`${chartId}-data`] = chartData;
        }
      };
      
      // Function to render the chart
      function renderChart(chartData) {
        // Get chart options from utilities or create default options
        let options = window.chartUtils ? 
          window.chartUtils.getDefaultChartOptions('bubble') : 
          getDefaultOptions();
        
        // Update options with chart-specific settings
        options = {
          ...options,
          chart: {
            ...options.chart,
            type: 'bubble',
            zoom: {
              enabled: true,
              type: 'xy'
            },
            events: {
              dataPointSelection: function(event, chartContext, config) {
                const seriesIndex = config.seriesIndex;
                const dataPointIndex = config.dataPointIndex;
                
                if (seriesIndex >= 0 && dataPointIndex >= 0) {
                  const selectedPoint = chartData.series[seriesIndex].data[dataPointIndex];
                  showCompanyDetails(selectedPoint, chartData.series[seriesIndex].name);
                }
              },
              dataPointMouseEnter: function(event, chartContext, config) {
                event.target.style.cursor = 'pointer';
              }
            }
          },
          series: chartData.series,
          xaxis: {
            title: {
              text: chartData.xMetric + ' (%)',
              style: {
                color: '#ffffff'
              }
            },
            tickAmount: 10,
            min: 0,
            max: chartData.quadrants.xMax,
            labels: {
              formatter: function(val) {
                return val.toFixed(1) + '%';
              },
              style: {
                colors: '#ffffff'
              }
            }
          },
          yaxis: {
            title: {
              text: chartData.yMetric + ' (%)',
              style: {
                color: '#ffffff'
              }
            },
            tickAmount: 10,
            min: 0,
            max: chartData.quadrants.yMax,
            labels: {
              formatter: function(val) {
                return val.toFixed(1) + '%';
              },
              style: {
                colors: '#ffffff'
              }
            }
          },
          tooltip: {
            custom: function({ series, seriesIndex, dataPointIndex, w }) {
              const point = w.config.series[seriesIndex].data[dataPointIndex];
              
              return `
                <div class="custom-tooltip p-2">
                  <div class="tooltip-title font-bold mb-1">${point.name}</div>
                  <div class="tooltip-category text-sm mb-2">${w.config.series[seriesIndex].name}</div>
                  <div class="tooltip-metrics grid grid-cols-2 gap-x-4 gap-y-1">
                    <div class="tooltip-label">${chartData.xMetric}:</div>
                    <div class="tooltip-value">${point.x.toFixed(1)}%</div>
                    <div class="tooltip-label">${chartData.yMetric}:</div>
                    <div class="tooltip-value">${point.y.toFixed(1)}%</div>
                    <div class="tooltip-label">${chartData.zMetric}:</div>
                    <div class="tooltip-value">$${point.z.toFixed(1)}M</div>
                  </div>
                  <div class="tooltip-footer text-xs mt-2 opacity-70">Click for details</div>
                </div>
              `;
            }
          },
          bubble: {
            minBubbleRadius: 5,
            maxBubbleRadius: 25
          },
          fill: {
            opacity: 0.8
          },
          grid: {
            borderColor: 'rgba(255, 255, 255, 0.1)',
            xaxis: {
              lines: {
                show: true,
                opacity: 0.1
              }
            },
            yaxis: {
              lines: {
                show: true,
                opacity: 0.1
              }
            }
          },
          annotations: {
            xaxis: showQuadrants ? [{
              x: chartData.quadrants.xCenter,
              strokeDashArray: 5,
              borderColor: '#ffffff',
              opacity: 0.3,
              label: {
                borderColor: 'transparent',
                style: {
                  color: '#ffffff',
                  background: 'transparent'
                },
                text: ''
              }
            }] : [],
            yaxis: showQuadrants ? [{
              y: chartData.quadrants.yCenter,
              strokeDashArray: 5,
              borderColor: '#ffffff',
              opacity: 0.3,
              label: {
                borderColor: 'transparent',
                style: {
                  color: '#ffffff',
                  background: 'transparent'
                },
                text: ''
              }
            }] : []
          },
          legend: {
            position: 'top',
            horizontalAlign: 'center',
            labels: {
              colors: '#ffffff'
            }
          }
        };
        
        // Create the chart
        const chart = new ApexCharts(document.querySelector(`#${chartId} .chart-container`), options);
        chart.render();
        
        // Store chart instance and quadrant data for later reference
        chart.opts = { quadrants: chartData.quadrants };
        window[`${chartId}-instance`] = chart;
        
        // Update quadrant labels visibility
        const quadrantLabels = document.getElementById('quadrant-labels');
        if (quadrantLabels) {
          quadrantLabels.style.display = showQuadrants ? 'grid' : 'none';
        }
        
        // Announce to screen readers
        const announcer = document.getElementById(`${chartId}-announcements`);
        if (announcer) {
          announcer.textContent = 'Market positioning chart loaded. Use arrow keys to navigate between data points.';
        }
      }
      
      // Function to update key metrics
      function updateMetrics(chartData) {
        // Update market leader
        const marketLeaderElement = document.getElementById('market-leader-value');
        const marketLeaderShareElement = document.getElementById('market-leader-share');
        
        if (marketLeaderElement && marketLeaderShareElement && chartData.metrics.marketLeaders.length > 0) {
          const marketLeader = chartData.metrics.marketLeaders[0];
          marketLeaderElement.textContent = marketLeader.name;
          marketLeaderShareElement.textContent = `Market Share: ${marketLeader[chartData.xMetric].toFixed(1)}%`;
        }
        
        // Update growth leader
        const growthLeaderElement = document.getElementById('growth-leader-value');
        const growthLeaderRateElement = document.getElementById('growth-leader-rate');
        
        if (growthLeaderElement && growthLeaderRateElement) {
          // Find company with highest growth rate
          const growthLeader = [...chartData.metrics.marketLeaders, ...chartData.metrics.emergingPlayers]
            .sort((a, b) => (b[chartData.yMetric] || 0) - (a[chartData.yMetric] || 0))[0];
          
          if (growthLeader) {
            growthLeaderElement.textContent = growthLeader.name;
            growthLeaderRateElement.textContent = `Growth Rate: ${growthLeader[chartData.yMetric].toFixed(1)}%`;
          }
        }
        
        // Update total companies
        const totalCompaniesElement = document.getElementById('total-companies-value');
        if (totalCompaniesElement) {
          totalCompaniesElement.textContent = chartData.metrics.totalCompanies;
        }
      }
      
      // Function to populate category filter
      function populateCategoryFilter(chartData) {
        const categorySelect = document.querySelector(`#${categoryFilterId} select`);
        if (!categorySelect) return;
        
        // Clear existing options except "All Categories"
        while (categorySelect.options.length > 1) {
          categorySelect.remove(1);
        }
        
        // Add options for each category
        chartData.series.forEach(series => {
          const option = document.createElement('option');
          option.value = series.name;
          option.textContent = series.name;
          categorySelect.appendChild(option);
        });
        
        // Add event listener
        categorySelect.addEventListener('change', () => {
          filterByCategory(categorySelect.value);
        });
      }
      
      // Function to filter by category
      function filterByCategory(category) {
        const chart = window[`${chartId}-instance`];
        if (!chart) return;
        
        if (category === 'all') {
          // Show all series
          chart.showSeries('all');
        } else {
          // Hide all series first
          chart.hideSeries('all');
          
          // Then show only the selected category
          chart.showSeries(category);
        }
        
        // Announce to screen readers
        const announcer = document.getElementById(`${chartId}-announcements`);
        if (announcer) {
          announcer.textContent = `Filtered to show ${category === 'all' ? 'all categories' : category} companies`;
        }
      }
      
      // Function to populate quadrant analysis
      function populateQuadrantAnalysis(chartData) {
        // Populate market leaders list
        const marketLeadersList = document.getElementById('market-leaders-list');
        if (marketLeadersList) {
          marketLeadersList.innerHTML = '';
          
          chartData.metrics.marketLeaders.forEach(company => {
            const li = document.createElement('li');
            li.textContent = `${company.name} (${company.category})`;
            marketLeadersList.appendChild(li);
          });
        }
        
        // Populate emerging players list
        const emergingPlayersList = document.getElementById('emerging-players-list');
        if (emergingPlayersList) {
          emergingPlayersList.innerHTML = '';
          
          chartData.metrics.emergingPlayers.forEach(company => {
            const li = document.createElement('li');
            li.textContent = `${company.name} (${company.category})`;
            emergingPlayersList.appendChild(li);
          });
        }
        
        // Populate established players list
        const establishedPlayersList = document.getElementById('established-players-list');
        if (establishedPlayersList) {
          establishedPlayersList.innerHTML = '';
          
          chartData.metrics.establishedPlayers.forEach(company => {
            const li = document.createElement('li');
            li.textContent = `${company.name} (${company.category})`;
            establishedPlayersList.appendChild(li);
          });
        }
        
        // Populate niche players list
        const nichePlayersList = document.getElementById('niche-players-list');
        if (nichePlayersList) {
          nichePlayersList.innerHTML = '';
          
          chartData.metrics.nichePlayers.forEach(company => {
            const li = document.createElement('li');
            li.textContent = `${company.name} (${company.category})`;
            nichePlayersList.appendChild(li);
          });
        }
      }
      
      // Function to show company details
      function showCompanyDetails(company, category) {
        const detailsContainer = document.getElementById('company-details');
        if (!detailsContainer) return;
        
        // Show the container
        detailsContainer.classList.remove('hidden');
        
        // Update company details
        document.getElementById('company-name').textContent = company.name;
        document.getElementById('company-category').textContent = category;
        document.getElementById('company-market-share').textContent = `${company.x.toFixed(1)}%`;
        document.getElementById('company-growth-rate').textContent = `${company.y.toFixed(1)}%`;
        document.getElementById('company-revenue').textContent = `$${company.z.toFixed(1)}M`;
        document.getElementById('company-founded').textContent = company.founded || 'Not specified';
        document.getElementById('company-headquarters').textContent = company.headquarters || 'Not specified';
        document.getElementById('company-employees').textContent = company.employees ? company.employees.toString() : 'Not specified';
        document.getElementById('company-funding').textContent = company.funding ? `$${company.funding.toFixed(1)}M` : 'Not specified';
        document.getElementById('company-description').textContent = company.description || 'No description available';
        
        // Scroll to details
        detailsContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
      
      // Function to populate data table
      function populateDataTable(chartData) {
        const tableBody = document.getElementById('market-table-body');
        if (!tableBody) return;
        
        // Clear existing rows
        tableBody.innerHTML = '';
        
        // Flatten all companies from all series
        const allCompanies = [];
        
        chartData.series.forEach(series => {
          series.data.forEach(company => {
            allCompanies.push({
              name: company.name,
              category: series.name,
              marketShare: company.x,
              growthRate: company.y,
              revenue: company.z,
              founded: company.founded,
              employees: company.employees,
              funding: company.funding
            });
          });
        });
        
        // Sort by market share descending
        allCompanies.sort((a, b) => b.marketShare - a.marketShare);
        
        // Add rows for each company
        allCompanies.forEach(company => {
          const row = document.createElement('tr');
          
          // Company name
          const nameCell = document.createElement('td');
          nameCell.textContent = company.name;
          row.appendChild(nameCell);
          
          // Category
          const categoryCell = document.createElement('td');
          categoryCell.textContent = company.category;
          row.appendChild(categoryCell);
          
          // Market Share
          const marketShareCell = document.createElement('td');
          marketShareCell.textContent = company.marketShare.toFixed(1);
          row.appendChild(marketShareCell);
          
          // Growth Rate
          const growthRateCell = document.createElement('td');
          growthRateCell.textContent = company.growthRate.toFixed(1);
          row.appendChild(growthRateCell);
          
          // Revenue
          const revenueCell = document.createElement('td');
          revenueCell.textContent = company.revenue.toFixed(1);
          row.appendChild(revenueCell);
          
          // Founded
          const foundedCell = document.createElement('td');
          foundedCell.textContent = company.founded || 'N/A';
          row.appendChild(foundedCell);
          
          // Employees
          const employeesCell = document.createElement('td');
          employeesCell.textContent = company.employees || 'N/A';
          row.appendChild(employeesCell);
          
          // Funding
          const fundingCell = document.createElement('td');
          fundingCell.textContent = company.funding ? company.funding.toFixed(1) : 'N/A';
          row.appendChild(fundingCell);
          
          // Add row to table
          tableBody.appendChild(row);
        });
      }
      
      // Default options if chartUtils is not available
      function getDefaultOptions() {
        return {
          chart: {
            type: 'bubble',
            fontFamily: 'Inter, system-ui, sans-serif',
            background: 'transparent',
            foreColor: '#ffffff',
            toolbar: {
              show: true
            }
          },
          tooltip: {
            enabled: true,
            theme: 'dark'
          },
          stroke: {
            width: 1,
            colors: ['#ffffff']
          }
        };
      }
    }
  });
</script>
