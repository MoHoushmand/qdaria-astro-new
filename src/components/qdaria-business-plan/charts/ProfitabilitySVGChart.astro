---
interface Props {
  title?: string;
  description?: string;
}

const { title, description } = Astro.props;

// EBITDA data in millions USD
const years = [2025, 2026, 2027, 2028, 2029, 2030];
const ebitda = [-15, -30, -10, 25, 75, 180];

// Calculate chart dimensions
const svgWidth = 800;
const svgHeight = 400;
const padding = 60;
const chartWidth = svgWidth - (padding * 2);
const chartHeight = svgHeight - (padding * 2);

// Calculate scales
const xScale = chartWidth / (years.length - 1);
const maxValue = Math.max(...ebitda.map(v => Math.abs(v)));
const yScale = chartHeight / (maxValue * 2);
const yZero = svgHeight - padding - (chartHeight / 2);
---

<div class="chart-container">
  {title && <h4 class="text-gradient-blue text-xl font-semibold mb-4">{title}</h4>}
  <div class="chart-content">
    <svg width="100%" height="100%" viewBox={`0 0 ${svgWidth} ${svgHeight}`} preserveAspectRatio="xMidYMid meet">
      <!-- Background -->
      <rect x="0" y="0" width={svgWidth} height={svgHeight} fill="#020617" rx="10" ry="10" />
      
      <!-- Grid lines -->
      {[-150, -100, -50, 0, 50, 100, 150, 200].map((value) => (
        <line 
          x1={padding} 
          y1={yZero - (value * yScale)} 
          x2={svgWidth - padding} 
          y2={yZero - (value * yScale)} 
          stroke="rgba(255, 255, 255, 0.1)" 
          stroke-width="1"
        />
      ))}
      
      {years.map((year, i) => (
        <line 
          x1={padding + (i * xScale)} 
          y1={padding} 
          x2={padding + (i * xScale)} 
          y2={svgHeight - padding} 
          stroke="rgba(255, 255, 255, 0.1)" 
          stroke-width="1"
        />
      ))}
      
      <!-- X and Y axes -->
      <line x1={padding} y1={yZero} x2={svgWidth - padding} y2={yZero} stroke="white" stroke-width="2" />
      <line x1={padding} y1={padding} x2={padding} y2={svgHeight - padding} stroke="white" stroke-width="2" />
      
      <!-- X-axis labels -->
      {years.map((year, i) => (
        <text 
          x={padding + (i * xScale)} 
          y={svgHeight - padding + 20} 
          text-anchor="middle" 
          fill="white" 
          font-size="14"
        >
          {year}
        </text>
      ))}
      
      <!-- Y-axis labels -->
      {[-150, -100, -50, 0, 50, 100, 150, 200].map((value) => (
        <text 
          x={padding - 10} 
          y={yZero - (value * yScale)} 
          text-anchor="end" 
          dominant-baseline="middle" 
          fill="white" 
          font-size="12"
        >
          {value > 0 ? `+$${value}M` : `$${value}M`}
        </text>
      ))}
      
      <!-- Bars -->
      {ebitda.map((value, i) => {
        const barHeight = Math.abs(value * yScale);
        const barY = value >= 0 ? yZero - barHeight : yZero;
        const barColor = value >= 0 ? 'rgba(101, 255, 0, 0.8)' : 'rgba(255, 99, 132, 0.8)';
        const barStroke = value >= 0 ? 'rgba(101, 255, 0, 1)' : 'rgba(255, 99, 132, 1)';
        
        return (
          <rect 
            x={padding + (i * xScale) - 20} 
            y={barY} 
            width="40" 
            height={barHeight} 
            fill={barColor} 
            stroke={barStroke} 
            stroke-width="2" 
            rx="5" 
            ry="5"
          />
        );
      })}
      
      <!-- Data labels -->
      {ebitda.map((value, i) => {
        const labelY = value >= 0 
          ? yZero - (value * yScale) - 10 
          : yZero + (Math.abs(value) * yScale) + 20;
        
        return (
          <text 
            x={padding + (i * xScale)} 
            y={labelY} 
            text-anchor="middle" 
            fill="white" 
            font-size="12"
            font-weight="bold"
          >
            {value > 0 ? `+$${value}M` : `$${value}M`}
          </text>
        );
      })}
      
      <!-- Chart title -->
      <text 
        x={svgWidth / 2} 
        y={padding / 2} 
        text-anchor="middle" 
        fill="#00ffd3" 
        font-size="16" 
        font-weight="bold"
      >
        EBITDA (Millions USD)
      </text>
      
      <!-- Break-even line label -->
      <text 
        x={svgWidth - padding - 10} 
        y={yZero - 10} 
        text-anchor="end" 
        fill="white" 
        font-size="12"
        font-style="italic"
      >
        Break-even
      </text>
    </svg>
  </div>
  {description && <p class="text-base text-gray-400 mt-4 italic text-sm">{description}</p>}
</div>

<style>
  .chart-container {
    @apply relative rounded-2xl border border-primary-500/30 bg-dark-bg/80 backdrop-blur-sm transition-all duration-500 overflow-visible;
    box-shadow: 0 0 25px rgba(4, 163, 255, 0.4);
    @apply m-8 p-10 max-w-[800px] w-full select-none;

    &:hover {
      box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      transform: translateY(-4px) scale(1.02);
      @apply border-primary-500/50 bg-dark-bg/90;
      animation: pulse-card 2s ease-in-out infinite;
    }

    @keyframes pulse-card {
      0%, 100% {
        box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      }
      50% {
        box-shadow: 0 0 70px rgba(4, 163, 255, 0.8);
      }
    }

    &::before {
      content: "";
      @apply absolute inset-0 rounded-2xl;
      background: radial-gradient(
        800px circle at var(--mouse-x, 0) var(--mouse-y, 0),
        rgba(4, 163, 255, 0.15),
        transparent 40%
      );
      opacity: 0;
      transition: opacity 0.5s;
    }

    &:hover::before {
      opacity: 1;
    }
  }

  .chart-content {
    @apply h-[400px] w-full;
  }

  .text-gradient-blue {
    @apply bg-gradient-to-r from-[#04a3ff] via-[#00ffd3] to-[#65ff00] bg-clip-text text-transparent;
    filter: brightness(1.8) saturate(1.4);
    text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    animation: pulse-gradient 4s ease-in-out infinite;
  }

  @keyframes pulse-gradient {
    0%, 100% {
      filter: brightness(1.8) saturate(1.4);
      text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    }
    50% {
      filter: brightness(2) saturate(1.6);
      text-shadow: 0 0 40px rgba(4, 163, 255, 0.5);
    }
  }
</style>

<script is:inline>
  // Add mouse tracking for hover effect
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.chart-container').forEach((card) => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        card.style.setProperty('--mouse-x', `${x}px`);
        card.style.setProperty('--mouse-y', `${y}px`);
      });
    });
  });
</script>
