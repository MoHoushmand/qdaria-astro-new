---
interface Props {
  title?: string;
  description?: string;
}

const { title = "SWOT Analysis Matrix", description } = Astro.props;
---

<div class="swot-chart-container">
  {title && <h4 class="text-gradient-blue text-xl font-semibold mb-4">{title}</h4>}
  <div id="swot-d3-chart" class="chart-content"></div>
  <div id="swot-tooltip" class="swot-tooltip"></div>
  {description && <p class="text-base text-gray-400 mt-4 italic text-sm">{description}</p>}
</div>

<style>
  .swot-chart-container {
    @apply relative rounded-2xl border border-primary-500/30 bg-dark-bg/80 backdrop-blur-sm transition-all duration-500 overflow-visible;
    box-shadow: 0 0 25px rgba(4, 163, 255, 0.4);
    @apply m-8 p-10 max-w-[1000px] w-full select-none;

    &:hover {
      box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      transform: translateY(-4px) scale(1.02);
      @apply border-primary-500/50 bg-dark-bg/90;
      animation: pulse-card 2s ease-in-out infinite;
    }

    @keyframes pulse-card {
      0%, 100% {
        box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      }
      50% {
        box-shadow: 0 0 70px rgba(4, 163, 255, 0.8);
      }
    }

    &::before {
      content: "";
      @apply absolute inset-0 rounded-2xl;
      background: radial-gradient(
        800px circle at var(--mouse-x, 0) var(--mouse-y, 0),
        rgba(4, 163, 255, 0.15),
        transparent 40%
      );
      opacity: 0;
      transition: opacity 0.5s;
    }

    &:hover::before {
      opacity: 1;
    }
  }

  .chart-content {
    @apply h-[600px] w-full relative;
  }

  .text-gradient-blue {
    @apply bg-gradient-to-r from-[#04a3ff] via-[#00ffd3] to-[#65ff00] bg-clip-text text-transparent;
    filter: brightness(1.8) saturate(1.4);
    text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    animation: pulse-gradient 4s ease-in-out infinite;
  }

  @keyframes pulse-gradient {
    0%, 100% {
      filter: brightness(1.8) saturate(1.4);
      text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    }
    50% {
      filter: brightness(2) saturate(1.6);
      text-shadow: 0 0 40px rgba(4, 163, 255, 0.5);
    }
  }

  .swot-tooltip {
    @apply absolute pointer-events-none opacity-0 transition-all duration-200;
    @apply bg-dark-bg/95 border border-primary-500/50 rounded-lg p-4;
    @apply backdrop-blur-sm shadow-lg;
    box-shadow: 0 0 20px rgba(4, 163, 255, 0.4);
    z-index: 1000;
  }

  .swot-tooltip.active {
    @apply opacity-100;
  }

  :global(.swot-bubble) {
    cursor: pointer;
    transition: all 0.3s ease;
  }

  :global(.swot-bubble:hover) {
    filter: brightness(1.3);
  }

  :global(.swot-bubble.selected) {
    stroke-width: 3;
    filter: brightness(1.5);
  }

  :global(.swot-label) {
    pointer-events: none;
    user-select: none;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
  }

  :global(.quadrant-label) {
    font-size: 20px;
    font-weight: bold;
    text-anchor: middle;
  }

  :global(.quadrant-border) {
    fill: none;
    stroke-opacity: 0.3;
    stroke-width: 2;
  }
</style>

<script>
  import * as d3 from 'd3';

  // SWOT Data with impact ratings
  const swotData = {
    strengths: [
      { id: 's1', text: 'Unique topological quantum approach', impact: 9, category: 'Technology' },
      { id: 's2', text: 'Partnership with Rigetti Computing', impact: 8, category: 'Partnerships' },
      { id: 's3', text: 'First-mover in Norway quantum market', impact: 8, category: 'Market' },
      { id: 's4', text: 'Comprehensive product portfolio (7 ventures)', impact: 9, category: 'Product' },
      { id: 's5', text: 'Strong technical team with PhD expertise', impact: 8, category: 'Team' }
    ],
    weaknesses: [
      { id: 'w1', text: 'Early-stage startup with limited resources', impact: 7, category: 'Resources' },
      { id: 'w2', text: 'Unproven technology at scale', impact: 6, category: 'Technology' },
      { id: 'w3', text: 'Dependent on external quantum hardware', impact: 5, category: 'Infrastructure' },
      { id: 'w4', text: 'Limited brand recognition', impact: 5, category: 'Market' }
    ],
    opportunities: [
      { id: 'o1', text: '$1.3T quantum market by 2035', impact: 10, category: 'Market' },
      { id: 'o2', text: '$30B+ government quantum funding', impact: 9, category: 'Funding' },
      { id: 'o3', text: 'Growing demand for Q+AI solutions', impact: 9, category: 'Demand' },
      { id: 'o4', text: 'Multiple IPO opportunities (2028-2030)', impact: 9, category: 'Exit' },
      { id: 'o5', text: 'Partnership expansion potential', impact: 8, category: 'Growth' }
    ],
    threats: [
      { id: 't1', text: 'Competition from tech giants (IBM, Google)', impact: 8, category: 'Competition' },
      { id: 't2', text: 'Technical challenges in quantum scaling', impact: 7, category: 'Technical' },
      { id: 't3', text: 'Market adoption slower than expected', impact: 6, category: 'Market' },
      { id: 't4', text: 'Regulatory changes in quantum technology', impact: 5, category: 'Regulatory' }
    ]
  };

  // QDaria color palette
  const quadrantColors = {
    strengths: '#65ff00',    // Green (positive internal)
    weaknesses: '#ff6b6b',   // Red (negative internal)
    opportunities: '#04a3ff', // Blue (positive external)
    threats: '#ff9f43'       // Orange (negative external)
  };

  // Category colors for additional visual coding
  const categoryColors = {
    Technology: '#65ff00',
    Partnerships: '#00ffd3',
    Market: '#04a3ff',
    Product: '#65ff00',
    Team: '#00ffd3',
    Resources: '#ff6b6b',
    Infrastructure: '#ff9f43',
    Funding: '#04a3ff',
    Demand: '#00ffd3',
    Exit: '#65ff00',
    Growth: '#04a3ff',
    Competition: '#ff6b6b',
    Technical: '#ff9f43',
    Regulatory: '#ffcc00'
  };

  function initSWOTChart() {
    const container = document.getElementById('swot-d3-chart');
    if (!container) return;

    // Clear any existing content
    container.innerHTML = '';

    // Dimensions
    const width = container.clientWidth || 1000;
    const height = 600;
    const margin = { top: 60, right: 40, bottom: 40, left: 40 };

    // Create SVG
    const svg = d3.select('#swot-d3-chart')
      .append('svg')
      .attr('width', '100%')
      .attr('height', height)
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('preserveAspectRatio', 'xMidYMid meet');

    // Background
    svg.append('rect')
      .attr('width', width)
      .attr('height', height)
      .attr('fill', '#020617')
      .attr('rx', 10)
      .attr('ry', 10);

    // Calculate quadrant positions
    const quadrantWidth = (width - margin.left - margin.right) / 2;
    const quadrantHeight = (height - margin.top - margin.bottom) / 2;

    const quadrants = [
      {
        key: 'strengths',
        label: 'STRENGTHS',
        x: margin.left,
        y: margin.top,
        centerX: margin.left + quadrantWidth / 2,
        centerY: margin.top + quadrantHeight / 2,
        color: quadrantColors.strengths
      },
      {
        key: 'opportunities',
        label: 'OPPORTUNITIES',
        x: margin.left + quadrantWidth,
        y: margin.top,
        centerX: margin.left + quadrantWidth * 1.5,
        centerY: margin.top + quadrantHeight / 2,
        color: quadrantColors.opportunities
      },
      {
        key: 'weaknesses',
        label: 'WEAKNESSES',
        x: margin.left,
        y: margin.top + quadrantHeight,
        centerX: margin.left + quadrantWidth / 2,
        centerY: margin.top + quadrantHeight * 1.5,
        color: quadrantColors.weaknesses
      },
      {
        key: 'threats',
        label: 'THREATS',
        x: margin.left + quadrantWidth,
        y: margin.top + quadrantHeight,
        centerX: margin.left + quadrantWidth * 1.5,
        centerY: margin.top + quadrantHeight * 1.5,
        color: quadrantColors.threats
      }
    ];

    // Draw quadrant borders and labels
    quadrants.forEach(q => {
      // Border
      svg.append('rect')
        .attr('class', 'quadrant-border')
        .attr('x', q.x)
        .attr('y', q.y)
        .attr('width', quadrantWidth)
        .attr('height', quadrantHeight)
        .attr('stroke', q.color)
        .attr('rx', 8);

      // Label
      svg.append('text')
        .attr('class', 'quadrant-label')
        .attr('x', q.centerX)
        .attr('y', q.y + 25)
        .attr('fill', q.color)
        .text(q.label);
    });

    // Prepare bubble data
    const bubbleData = [];
    quadrants.forEach(q => {
      const items = swotData[q.key];
      items.forEach(item => {
        bubbleData.push({
          ...item,
          quadrant: q.key,
          quadrantCenterX: q.centerX,
          quadrantCenterY: q.centerY,
          color: categoryColors[item.category] || q.color,
          baseColor: q.color
        });
      });
    });

    // Scale for bubble radius based on impact
    const radiusScale = d3.scaleSqrt()
      .domain([1, 10])
      .range([15, 40]);

    // Create force simulation for each quadrant
    const simulation = d3.forceSimulation(bubbleData)
      .force('charge', d3.forceManyBody().strength(-30))
      .force('collision', d3.forceCollide().radius(d => radiusScale(d.impact) + 5))
      .force('x', d3.forceX(d => d.quadrantCenterX).strength(0.3))
      .force('y', d3.forceY(d => d.quadrantCenterY).strength(0.3))
      .on('tick', ticked);

    // Create bubble groups
    const bubbles = svg.selectAll('.swot-bubble-group')
      .data(bubbleData)
      .enter()
      .append('g')
      .attr('class', 'swot-bubble-group');

    // Add circles
    bubbles.append('circle')
      .attr('class', 'swot-bubble')
      .attr('r', d => radiusScale(d.impact))
      .attr('fill', d => d.color)
      .attr('stroke', d => d.baseColor)
      .attr('stroke-width', 2)
      .attr('opacity', 0.85)
      .on('mouseover', handleMouseOver)
      .on('mouseout', handleMouseOut)
      .on('click', handleClick);

    // Add impact labels inside bubbles
    bubbles.append('text')
      .attr('class', 'swot-label')
      .attr('text-anchor', 'middle')
      .attr('dy', '.3em')
      .attr('fill', '#020617')
      .attr('font-size', d => Math.max(12, radiusScale(d.impact) / 2))
      .attr('font-weight', 'bold')
      .text(d => d.impact);

    // Update positions on simulation tick
    function ticked() {
      bubbles.attr('transform', d => {
        // Keep bubbles within their quadrant
        const quadrant = quadrants.find(q => q.key === d.quadrant);
        const maxRadius = radiusScale(d.impact);
        d.x = Math.max(quadrant.x + maxRadius, Math.min(quadrant.x + quadrantWidth - maxRadius, d.x));
        d.y = Math.max(quadrant.y + maxRadius + 30, Math.min(quadrant.y + quadrantHeight - maxRadius, d.y));
        return `translate(${d.x}, ${d.y})`;
      });
    }

    // Tooltip
    const tooltip = d3.select('#swot-tooltip');

    function handleMouseOver(event, d) {
      d3.select(this)
        .transition()
        .duration(200)
        .attr('opacity', 1)
        .attr('stroke-width', 3);

      tooltip
        .style('left', `${event.pageX + 15}px`)
        .style('top', `${event.pageY - 15}px`)
        .classed('active', true)
        .html(`
          <div style="color: ${d.color}; font-weight: bold; font-size: 14px; margin-bottom: 8px;">
            ${d.text}
          </div>
          <div style="color: rgba(255,255,255,0.8); font-size: 12px; margin-bottom: 4px;">
            <strong>Category:</strong> ${d.category}
          </div>
          <div style="color: rgba(255,255,255,0.8); font-size: 12px;">
            <strong>Impact:</strong> ${d.impact}/10
          </div>
        `);
    }

    function handleMouseOut(event, d) {
      d3.select(this)
        .transition()
        .duration(200)
        .attr('opacity', 0.85)
        .attr('stroke-width', 2);

      tooltip.classed('active', false);
    }

    let selectedBubble = null;

    function handleClick(event, d) {
      // Deselect previous
      if (selectedBubble) {
        d3.select(selectedBubble).classed('selected', false);
      }

      // Select current
      const bubble = d3.select(this);
      bubble.classed('selected', true);
      selectedBubble = this;

      // Show expanded info
      console.log('SWOT Item Details:', d);
    }

    // Stop simulation after settling
    setTimeout(() => {
      simulation.stop();
    }, 3000);
  }

  // Initialize chart
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSWOTChart);
  } else {
    initSWOTChart();
  }

  // Handle resize
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(initSWOTChart, 250);
  });

  // Mouse tracking for container hover effect
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.swot-chart-container').forEach((card) => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        card.style.setProperty('--mouse-x', `${x}px`);
        card.style.setProperty('--mouse-y', `${y}px`);
      });
    });
  });
</script>
