---
import ApexChartWrapper from './ApexChartWrapper.astro';
import type { BaseChartProps } from '../../../types/chart';

interface Props extends BaseChartProps {
  className?: string;
  height?: number;
  width?: string;
  darkMode?: boolean;
  highContrastMode?: boolean;
  revenueData?: any;
  defaultYear?: number | string;
  colors?: string[];
  showGrowth?: boolean;
  showTopItems?: boolean;
}

const { 
  id = `revenue-diversification-chart-${Math.random().toString(36).substring(2, 9)}`,
  title = "QDaria Revenue Diversification", 
  description = "Treemap chart showing QDaria's revenue diversification across different business segments and product categories.",
  className = "",
  height = 500,
  width = "100%",
  darkMode = true,
  highContrastMode = false,
  revenueData,
  defaultYear = 2030,
  colors,
  showGrowth = true,
  showTopItems = true
} = Astro.props;

// Create a unique ID for the chart
const chartId = id;
const dataTableId = `${chartId}-data-table`;
const yearSelectId = `${chartId}-year-select`;
const growthToggleId = `${chartId}-growth-toggle`;
const topItemsToggleId = `${chartId}-top-items-toggle`;

// Worker path for data processing
const workerPath = "/charts/revenueDiversificationWorker.js";

// Available years (will be populated by JavaScript)
const availableYears = [];
---

<ApexChartWrapper
  id={chartId}
  title={title}
  description={description}
  className={className}
  height={height}
  width={width}
  darkMode={darkMode}
  highContrastMode={highContrastMode}
  dataTableId={dataTableId}
>
  <!-- Chart Controls -->
  <div class="chart-controls mb-4 flex flex-wrap gap-4">
    <!-- Year Select -->
    <div class="year-select" id={yearSelectId}>
      <div class="select-label mb-1">Year:</div>
      <div class="select-container">
        <select class="bg-dark-bg text-white border border-primary-500/30 rounded px-2 py-1 w-full">
          <!-- Options will be populated by JavaScript -->
        </select>
      </div>
    </div>
    
    <!-- Growth Toggle -->
    <div class="growth-toggle" id={growthToggleId}>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="checkbox" name="showGrowth" checked={showGrowth} />
          <span class="toggle-label ml-2">Show Year-over-Year Growth</span>
        </label>
      </div>
    </div>
    
    <!-- Top Items Toggle -->
    <div class="top-items-toggle" id={topItemsToggleId}>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="checkbox" name="showTopItems" checked={showTopItems} />
          <span class="toggle-label ml-2">Show Top Categories</span>
        </label>
      </div>
    </div>
  </div>
  
  <!-- Chart container -->
  <div class="treemap-chart-container">
    <div class="chart-container"></div>
  </div>
  
  <!-- Revenue Metrics -->
  <div class="revenue-metrics mt-6">
    <h3 class="text-lg font-semibold mb-2">Revenue Breakdown</h3>
    
    <!-- Total Revenue -->
    <div class="total-revenue mb-4">
      <div class="text-xl font-bold" id="total-revenue-display">
        <!-- Will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- Top Categories -->
    <div class="top-categories mb-6" id="top-categories-container">
      <h4 class="text-md font-medium mb-2">Top Revenue Categories</h4>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="top-categories-grid">
        <!-- Category cards will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- Top Subcategories -->
    <div class="top-subcategories mb-6" id="top-subcategories-container">
      <h4 class="text-md font-medium mb-2">Top Revenue Subcategories</h4>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="top-subcategories-grid">
        <!-- Subcategory cards will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- Growth Metrics -->
    <div class="growth-metrics mb-6" id="growth-metrics-container">
      <h4 class="text-md font-medium mb-2">Year-over-Year Growth</h4>
      <div class="overflow-x-auto">
        <table class="w-full text-left">
          <thead>
            <tr>
              <th class="p-3 border-b border-primary-500/30">Category</th>
              <th class="p-3 border-b border-primary-500/30">Current Revenue</th>
              <th class="p-3 border-b border-primary-500/30">Previous Year</th>
              <th class="p-3 border-b border-primary-500/30">Growth</th>
              <th class="p-3 border-b border-primary-500/30">Growth %</th>
            </tr>
          </thead>
          <tbody id="growth-metrics-body">
            <!-- Table rows will be populated by JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
  </div>
  
  <!-- Data table slot -->
  <table slot="data-table" class="chart-data-table-content">
    <thead>
      <tr>
        <th>Category</th>
        <th>Subcategory</th>
        <th>Revenue ($B)</th>
        <th>% of Total</th>
        <th>% of Category</th>
      </tr>
    </thead>
    <tbody id="revenue-table-body">
      <!-- Table rows will be populated by JavaScript -->
    </tbody>
  </table>
</ApexChartWrapper>

<style>
  .chart-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .select-label, .toggle-label {
    font-weight: bold;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .toggle-option {
    display: flex;
    align-items: center;
    cursor: pointer;
  }
  
  .toggle-option input {
    margin-right: 0.5rem;
    cursor: pointer;
  }
  
  /* Chart Container */
  .treemap-chart-container {
    position: relative;
    height: 500px;
    margin-bottom: 2rem;
  }
  
  .chart-container {
    width: 100%;
    height: 100%;
  }
  
  /* Revenue Metrics */
  .revenue-metrics {
    margin-top: 1.5rem;
  }
  
  /* Category Cards */
  .category-card {
    background: rgba(4, 163, 255, 0.1);
    border: 1px solid rgba(4, 163, 255, 0.3);
    border-radius: 0.5rem;
    padding: 1rem;
  }
  
  .category-name {
    font-size: 1.125rem;
    font-weight: bold;
    color: white;
    margin-bottom: 0.5rem;
  }
  
  .category-value {
    font-size: 1.25rem;
    font-weight: bold;
    color: white;
  }
  
  .category-percentage {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin-top: 0.25rem;
  }
  
  /* Growth Metrics */
  .growth-metrics table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .growth-metrics th,
  .growth-metrics td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .growth-metrics th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  .positive-growth {
    color: #00d085;
  }
  
  .negative-growth {
    color: #ff6b6b;
  }
  
  /* Data table styles */
  .chart-data-table-content {
    width: 100%;
    border-collapse: collapse;
    color: white;
    background: rgba(2, 6, 23, 0.7);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .chart-data-table-content th, 
  .chart-data-table-content td {
    padding: 10px;
    text-align: left;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .chart-data-table-content th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  .chart-data-table-content tr:hover {
    background: rgba(4, 163, 255, 0.1);
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .top-categories-grid,
    .top-subcategories-grid {
      grid-template-columns: 1fr;
    }
    
    .growth-metrics {
      overflow-x: auto;
    }
  }
</style>

<script define:vars={{ chartId, revenueData, defaultYear, colors, showGrowth, showTopItems, yearSelectId, growthToggleId, topItemsToggleId, workerPath }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize the chart when ApexCharts is loaded
    if (typeof ApexCharts !== 'undefined') {
      initRevenueDiversificationChart();
    } else {
      // If ApexCharts is not loaded yet, wait for it
      window.addEventListener('ApexChartsLoaded', initRevenueDiversificationChart);
    }
    
    // Initialize growth toggle
    const growthToggle = document.querySelector(`#${growthToggleId} input[type="checkbox"]`);
    if (growthToggle) {
      growthToggle.addEventListener('change', () => {
        updateGrowthVisibility();
      });
    }
    
    // Initialize top items toggle
    const topItemsToggle = document.querySelector(`#${topItemsToggleId} input[type="checkbox"]`);
    if (topItemsToggle) {
      topItemsToggle.addEventListener('change', () => {
        updateTopItemsVisibility();
      });
    }
    
    // Function to update growth metrics visibility
    function updateGrowthVisibility() {
      const showGrowth = document.querySelector(`#${growthToggleId} input[type="checkbox"]`).checked;
      
      // Toggle visibility of growth metrics container
      const growthMetricsContainer = document.getElementById('growth-metrics-container');
      if (growthMetricsContainer) {
        growthMetricsContainer.style.display = showGrowth ? 'block' : 'none';
      }
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Growth metrics ${showGrowth ? 'shown' : 'hidden'}`;
      }
    }
    
    // Function to update top items visibility
    function updateTopItemsVisibility() {
      const showTopItems = document.querySelector(`#${topItemsToggleId} input[type="checkbox"]`).checked;
      
      // Toggle visibility of top categories and subcategories containers
      const topCategoriesContainer = document.getElementById('top-categories-container');
      const topSubcategoriesContainer = document.getElementById('top-subcategories-container');
      
      if (topCategoriesContainer) {
        topCategoriesContainer.style.display = showTopItems ? 'block' : 'none';
      }
      
      if (topSubcategoriesContainer) {
        topSubcategoriesContainer.style.display = showTopItems ? 'block' : 'none';
      }
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Top items ${showTopItems ? 'shown' : 'hidden'}`;
      }
    }
    
    // Function to initialize the chart
    function initRevenueDiversificationChart() {
      // Create a worker for data processing
      const worker = new Worker(workerPath);
      
      // Send data to worker for processing
      worker.postMessage({
        action: 'prepareRevenueData',
        revenueData,
        year: defaultYear,
        colors
      });
      
      // Handle worker response
      worker.onmessage = function(e) {
        if (e.data.action === 'revenueDataReady') {
          const chartData = e.data.chartData;
          
          // Populate available years
          populateYearSelect(chartData);
          
          // Render chart and metrics
          renderChart(chartData);
          updateTotalRevenue(chartData);
          updateTopCategories(chartData);
          updateTopSubcategories(chartData);
          updateGrowthMetrics(chartData);
          updateDataTable(chartData);
          
          // Store chart data for later use
          window[`${chartId}-data`] = chartData;
          
          // Update visibility based on toggle states
          updateGrowthVisibility();
          updateTopItemsVisibility();
        }
      };
      
      // Function to populate year select
      function populateYearSelect(chartData) {
        const yearSelect = document.querySelector(`#${yearSelectId} select`);
        if (!yearSelect) return;
        
        // Clear existing options
        yearSelect.innerHTML = '';
        
        // If revenueData is provided, extract available years
        const years = [];
        
        if (revenueData) {
          Object.keys(revenueData).forEach(year => {
            const yearNum = parseInt(year, 10);
            if (!isNaN(yearNum)) {
              years.push(yearNum);
            }
          });
        } else {
          // Default years if no data provided
          const currentYear = new Date().getFullYear();
          for (let i = 0; i < 5; i++) {
            years.push(currentYear + i);
          }
        }
        
        // Sort years
        years.sort((a, b) => a - b);
        
        // Add options for each year
        years.forEach(year => {
          const option = document.createElement('option');
          option.value = year.toString();
          option.textContent = year.toString();
          option.selected = year.toString() === chartData.year.toString();
          yearSelect.appendChild(option);
        });
        
        // Add event listener
        yearSelect.addEventListener('change', () => {
          const selectedYear = yearSelect.value;
          updateYear(selectedYear);
        });
      }
      
      // Function to update year
      function updateYear(year) {
        // Create a worker for data processing
        const worker = new Worker(workerPath);
        
        // Send data to worker for processing
        worker.postMessage({
          action: 'prepareRevenueData',
          revenueData,
          year,
          colors
        });
        
        // Handle worker response
        worker.onmessage = function(e) {
          if (e.data.action === 'revenueDataReady') {
            const chartData = e.data.chartData;
            
            // Update chart and metrics
            updateChart(chartData);
            updateTotalRevenue(chartData);
            updateTopCategories(chartData);
            updateTopSubcategories(chartData);
            updateGrowthMetrics(chartData);
            updateDataTable(chartData);
            
            // Store chart data for later use
            window[`${chartId}-data`] = chartData;
            
            // Announce to screen readers
            const announcer = document.getElementById(`${chartId}-announcements`);
            if (announcer) {
              announcer.textContent = `Year updated to ${year}`;
            }
          }
        };
      }
      
      // Function to render the chart
      function renderChart(chartData) {
        // Get chart options from utilities or create default options
        let options = window.chartUtils ? 
          window.chartUtils.getDefaultChartOptions('treemap') : 
          getDefaultOptions();
        
        // Prepare series data for ApexCharts
        const series = [{
          data: chartData.series.map(item => ({
            x: item.name,
            y: item.value,
            fillColor: item.color,
            parent: item.parent
          }))
        }];
        
        // Update options with chart-specific settings
        options = {
          ...options,
          chart: {
            ...options.chart,
            type: 'treemap',
            height: 500,
            toolbar: {
              show: true
            }
          },
          series,
          colors: Object.values(chartData.colorMap),
          plotOptions: {
            treemap: {
              distributed: true,
              enableShades: false
            }
          },
          tooltip: {
            y: {
              formatter: function(value) {
                return `$${value.toFixed(1)}B`;
              }
            }
          },
          title: {
            text: `Revenue Diversification (${chartData.year})`,
            align: 'center',
            style: {
              fontSize: '18px',
              fontWeight: 'bold',
              color: '#ffffff'
            }
          }
        };
        
        // Create the chart
        const chart = new ApexCharts(document.querySelector(`#${chartId} .chart-container`), options);
        chart.render();
        
        // Store chart instance for later reference
        window[`${chartId}-instance`] = chart;
        
        // Announce to screen readers
        const announcer = document.getElementById(`${chartId}-announcements`);
        if (announcer) {
          announcer.textContent = 'Revenue diversification chart loaded. Use arrow keys to navigate between data points.';
        }
      }
      
      // Function to update chart
      function updateChart(chartData) {
        const chart = window[`${chartId}-instance`];
        if (!chart) return;
        
        // Prepare series data for ApexCharts
        const series = [{
          data: chartData.series.map(item => ({
            x: item.name,
            y: item.value,
            fillColor: item.color,
            parent: item.parent
          }))
        }];
        
        // Update chart
        chart.updateOptions({
          series,
          colors: Object.values(chartData.colorMap),
          title: {
            text: `Revenue Diversification (${chartData.year})`
          }
        });
      }
      
      // Function to update total revenue
      function updateTotalRevenue(chartData) {
        const totalRevenueDisplay = document.getElementById('total-revenue-display');
        if (!totalRevenueDisplay) return;
        
        totalRevenueDisplay.textContent = `Total Revenue: $${chartData.totalRevenue.toFixed(1)}B`;
      }
      
      // Function to update top categories
      function updateTopCategories(chartData) {
        const topCategoriesGrid = document.getElementById('top-categories-grid');
        if (!topCategoriesGrid) return;
        
        // Clear existing cards
        topCategoriesGrid.innerHTML = '';
        
        // Add cards for top categories
        chartData.topCategories.forEach(category => {
          const card = document.createElement('div');
          card.className = 'category-card';
          card.style.borderColor = chartData.colorMap[category.name] || 'rgba(4, 163, 255, 0.3)';
          
          const nameElement = document.createElement('div');
          nameElement.className = 'category-name';
          nameElement.textContent = category.name;
          
          const valueElement = document.createElement('div');
          valueElement.className = 'category-value';
          valueElement.textContent = `$${category.value.toFixed(1)}B`;
          
          const percentageElement = document.createElement('div');
          percentageElement.className = 'category-percentage';
          percentageElement.textContent = `${category.percentage.toFixed(1)}% of total revenue`;
          
          card.appendChild(nameElement);
          card.appendChild(valueElement);
          card.appendChild(percentageElement);
          
          // Add card to grid
          topCategoriesGrid.appendChild(card);
        });
      }
      
      // Function to update top subcategories
      function updateTopSubcategories(chartData) {
        const topSubcategoriesGrid = document.getElementById('top-subcategories-grid');
        if (!topSubcategoriesGrid) return;
        
        // Clear existing cards
        topSubcategoriesGrid.innerHTML = '';
        
        // Add cards for top subcategories
        chartData.topSubcategories.forEach(subcategory => {
          const card = document.createElement('div');
          card.className = 'category-card';
          card.style.borderColor = chartData.colorMap[subcategory.name] || 'rgba(4, 163, 255, 0.3)';
          
          const nameElement = document.createElement('div');
          nameElement.className = 'category-name';
          nameElement.textContent = subcategory.name;
          
          const parentElement = document.createElement('div');
          parentElement.className = 'text-sm text-gray-300 mb-2';
          parentElement.textContent = `Part of ${subcategory.parent}`;
          
          const valueElement = document.createElement('div');
          valueElement.className = 'category-value';
          valueElement.textContent = `$${subcategory.value.toFixed(1)}B`;
          
          const percentageElement = document.createElement('div');
          percentageElement.className = 'category-percentage';
          percentageElement.textContent = `${subcategory.percentage.toFixed(1)}% of ${subcategory.parent}`;
          
          card.appendChild(nameElement);
          card.appendChild(parentElement);
          card.appendChild(valueElement);
          card.appendChild(percentageElement);
          
          // Add card to grid
          topSubcategoriesGrid.appendChild(card);
        });
      }
      
      // Function to update growth metrics
      function updateGrowthMetrics(chartData) {
        const growthMetricsBody = document.getElementById('growth-metrics-body');
        if (!growthMetricsBody) return;
        
        // Clear existing rows
        growthMetricsBody.innerHTML = '';
        
        // If no growth metrics available, show message
        if (!chartData.growthMetrics || Object.keys(chartData.growthMetrics).length === 0) {
          const row = document.createElement('tr');
          const cell = document.createElement('td');
          cell.colSpan = 5;
          cell.className = 'p-3 text-center';
          cell.textContent = 'No growth data available for this year';
          row.appendChild(cell);
          growthMetricsBody.appendChild(row);
          return;
        }
        
        // Get top-level categories
        const categories = chartData.series
          .filter(item => !item.parent)
          .map(item => item.name);
        
        // Add rows for each category
        categories.forEach(category => {
          const row = document.createElement('tr');
          
          // Category name
          const nameCell = document.createElement('td');
          nameCell.className = 'p-3 border-b border-primary-500/10';
          nameCell.textContent = category;
          row.appendChild(nameCell);
          
          // Current revenue
          const currentValue = chartData.series.find(item => item.name === category)?.value || 0;
          const currentCell = document.createElement('td');
          currentCell.className = 'p-3 border-b border-primary-500/10';
          currentCell.textContent = `$${currentValue.toFixed(1)}B`;
          row.appendChild(currentCell);
          
          // Previous year revenue
          const growthMetric = chartData.growthMetrics[category];
          const prevValue = currentValue - (growthMetric?.growth || 0);
          const prevCell = document.createElement('td');
          prevCell.className = 'p-3 border-b border-primary-500/10';
          prevCell.textContent = `$${prevValue.toFixed(1)}B`;
          row.appendChild(prevCell);
          
          // Growth
          const growthCell = document.createElement('td');
          growthCell.className = `p-3 border-b border-primary-500/10 ${growthMetric?.growth > 0 ? 'positive-growth' : 'negative-growth'}`;
          growthCell.textContent = growthMetric ? `${growthMetric.growth > 0 ? '+' : ''}$${growthMetric.growth.toFixed(1)}B` : 'N/A';
          row.appendChild(growthCell);
          
          // Growth percentage
          const growthPercentCell = document.createElement('td');
          growthPercentCell.className = `p-3 border-b border-primary-500/10 ${growthMetric?.growthPercentage > 0 ? 'positive-growth' : 'negative-growth'}`;
          growthPercentCell.textContent = growthMetric ? `${growthMetric.growthPercentage > 0 ? '+' : ''}${growthMetric.growthPercentage.toFixed(1)}%` : 'N/A';
          row.appendChild(growthPercentCell);
          
          // Add row to table
          growthMetricsBody.appendChild(row);
        });
      }
      
      // Function to update data table
      function updateDataTable(chartData) {
        const tableBody = document.getElementById('revenue-table-body');
        if (!tableBody) return;
        
        // Clear existing rows
        tableBody.innerHTML = '';
        
        // Add rows for each item
        chartData.series.forEach(item => {
          const row = document.createElement('tr');
          
          // Category
          const categoryCell = document.createElement('td');
          categoryCell.textContent = item.parent || item.name;
          row.appendChild(categoryCell);
          
          // Subcategory
          const subcategoryCell = document.createElement('td');
          subcategoryCell.textContent = item.parent ? item.name : '-';
          row.appendChild(subcategoryCell);
          
          // Revenue
          const revenueCell = document.createElement('td');
          revenueCell.textContent = `$${item.value.toFixed(1)}B`;
          row.appendChild(revenueCell);
          
          // % of Total
          const totalPercentCell = document.createElement('td');
          const totalPercent = (item.value / chartData.totalRevenue) * 100;
          totalPercentCell.textContent = `${totalPercent.toFixed(1)}%`;
          row.appendChild(totalPercentCell);
          
          // % of Category
          const categoryPercentCell = document.createElement('td');
          if (item.parent) {
            const parentItem = chartData.series.find(s => s.name === item.parent);
            const categoryPercent = parentItem ? (item.value / parentItem.value) * 100 : 0;
            categoryPercentCell.textContent = `${categoryPercent.toFixed(1)}%`;
          } else {
            categoryPercentCell.textContent = '100%';
          }
          row.appendChild(categoryPercentCell);
          
          // Add row to table
          tableBody.appendChild(row);
        });
      }
      
      // Default options if chartUtils is not available
      function getDefaultOptions() {
        return {
          chart: {
            type: 'treemap',
            fontFamily: 'Inter, system-ui, sans-serif',
            background: 'transparent',
            foreColor: '#ffffff',
            toolbar: {
              show: true
            }
          },
          tooltip: {
            enabled: true,
            theme: 'dark'
          }
        };
      }
    }
  });
</script>
