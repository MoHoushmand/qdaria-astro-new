---
import ApexChartWrapper from './ApexChartWrapper.astro';
import type { BaseChartProps } from '../../../types/chart';

interface Competitor {
  name: string;
  scores: Record<string, number>;
  color?: string;
}

interface Props extends BaseChartProps {
  className?: string;
  height?: number;
  width?: string;
  darkMode?: boolean;
  highContrastMode?: boolean;
  competitors?: Competitor[];
  categories?: string[];
  colors?: string[];
  showAverage?: boolean;
  showLeaders?: boolean;
}

const { 
  id = `competitor-strength-chart-${Math.random().toString(36).substring(2, 9)}`,
  title = "Quantum Computing Competitor Strength Analysis", 
  description = "Polar area chart showing relative strengths of quantum computing competitors across key categories.",
  className = "",
  height = 500,
  width = "100%",
  darkMode = true,
  highContrastMode = false,
  competitors,
  categories,
  colors,
  showAverage = true,
  showLeaders = true
} = Astro.props;

// Create a unique ID for the chart
const chartId = id;
const dataTableId = `${chartId}-data-table`;
const competitorToggleId = `${chartId}-competitor-toggle`;
const averageToggleId = `${chartId}-average-toggle`;
const leadersToggleId = `${chartId}-leaders-toggle`;

// Worker path for data processing
const workerPath = "/charts/competitorStrengthWorker.js";
---

<ApexChartWrapper
  id={chartId}
  title={title}
  description={description}
  className={className}
  height={height}
  width={width}
  darkMode={darkMode}
  highContrastMode={highContrastMode}
  dataTableId={dataTableId}
>
  <!-- Chart Controls -->
  <div class="chart-controls mb-4 flex flex-wrap gap-4">
    <!-- Competitor Toggle -->
    <div class="competitor-toggle" id={competitorToggleId}>
      <div class="toggle-label mb-1">Competitors:</div>
      <div class="toggle-select">
        <select class="bg-dark-bg text-white border border-primary-500/30 rounded px-2 py-1 w-full" multiple>
          <!-- Options will be populated by JavaScript -->
        </select>
      </div>
    </div>
    
    <!-- Average Toggle -->
    <div class="average-toggle" id={averageToggleId}>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="checkbox" name="showAverage" checked={showAverage} />
          <span class="toggle-label ml-2">Show Industry Average</span>
        </label>
      </div>
    </div>
    
    <!-- Leaders Toggle -->
    <div class="leaders-toggle" id={leadersToggleId}>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="checkbox" name="showLeaders" checked={showLeaders} />
          <span class="toggle-label ml-2">Highlight Category Leaders</span>
        </label>
      </div>
    </div>
  </div>
  
  <!-- Chart container -->
  <div class="strength-chart-container">
    <div class="chart-container"></div>
  </div>
  
  <!-- Strength Metrics -->
  <div class="strength-metrics mt-6">
    <h3 class="text-lg font-semibold mb-2">Strength Analysis</h3>
    
    <!-- Overall Strength Ranking -->
    <div class="overall-strength mb-6">
      <h4 class="text-md font-medium mb-2">Overall Strength Ranking</h4>
      <div class="overflow-x-auto">
        <table class="w-full text-left">
          <thead>
            <tr>
              <th class="p-3 border-b border-primary-500/30">Rank</th>
              <th class="p-3 border-b border-primary-500/30">Competitor</th>
              <th class="p-3 border-b border-primary-500/30">Overall Score</th>
              <th class="p-3 border-b border-primary-500/30">Strongest Category</th>
              <th class="p-3 border-b border-primary-500/30">Weakest Category</th>
            </tr>
          </thead>
          <tbody id="strength-ranking-body">
            <!-- Table rows will be populated by JavaScript -->
          </tbody>
        </table>
      </div>
    </div>
    
    <!-- Category Leaders -->
    <div class="category-leaders mb-6" id="category-leaders-container">
      <h4 class="text-md font-medium mb-2">Category Leaders</h4>
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" id="category-leaders-grid">
        <!-- Category leader cards will be populated by JavaScript -->
      </div>
    </div>
    
    <!-- QDaria Competitive Position -->
    <div class="qdaria-position mb-6" id="qdaria-position-container">
      <h4 class="text-md font-medium mb-2">QDaria Competitive Position</h4>
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div class="strengths p-4 border border-green-500/30 rounded-lg bg-dark-bg/50">
          <h5 class="text-green-400 font-medium mb-2">Strengths</h5>
          <ul class="list-disc list-inside text-sm" id="qdaria-strengths-list">
            <!-- List will be populated by JavaScript -->
          </ul>
        </div>
        <div class="improvement-areas p-4 border border-yellow-500/30 rounded-lg bg-dark-bg/50">
          <h5 class="text-yellow-400 font-medium mb-2">Areas for Improvement</h5>
          <ul class="list-disc list-inside text-sm" id="qdaria-improvements-list">
            <!-- List will be populated by JavaScript -->
          </ul>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Data table slot -->
  <table slot="data-table" class="chart-data-table-content">
    <thead>
      <tr>
        <th>Competitor</th>
        <!-- Category headers will be populated by JavaScript -->
        <th>Overall Score</th>
      </tr>
    </thead>
    <tbody id="strength-table-body">
      <!-- Table rows will be populated by JavaScript -->
    </tbody>
  </table>
</ApexChartWrapper>

<style>
  .chart-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .toggle-label, .filter-label, .search-label {
    font-weight: bold;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .toggle-option {
    display: flex;
    align-items: center;
    cursor: pointer;
  }
  
  .toggle-option input {
    margin-right: 0.5rem;
    cursor: pointer;
  }
  
  /* Chart Container */
  .strength-chart-container {
    position: relative;
    height: 500px;
    margin-bottom: 2rem;
  }
  
  .chart-container {
    width: 100%;
    height: 100%;
  }
  
  /* Strength Metrics */
  .strength-metrics {
    margin-top: 1.5rem;
  }
  
  .overall-strength table {
    width: 100%;
    border-collapse: collapse;
  }
  
  .overall-strength th,
  .overall-strength td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .overall-strength th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  /* Category Leaders */
  .category-leader-card {
    background: rgba(4, 163, 255, 0.1);
    border: 1px solid rgba(4, 163, 255, 0.3);
    border-radius: 0.5rem;
    padding: 1rem;
  }
  
  .category-name {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 0.5rem;
  }
  
  .leader-name {
    font-size: 1.25rem;
    font-weight: bold;
    color: white;
  }
  
  .leader-score {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.7);
    margin-top: 0.25rem;
  }
  
  /* QDaria Position */
  .qdaria-position ul {
    max-height: 200px;
    overflow-y: auto;
  }
  
  /* Data table styles */
  .chart-data-table-content {
    width: 100%;
    border-collapse: collapse;
    color: white;
    background: rgba(2, 6, 23, 0.7);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .chart-data-table-content th, 
  .chart-data-table-content td {
    padding: 10px;
    text-align: left;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  ''
  .chart-data-table-content th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  .chart-data-table-content tr:hover {
    background: rgba(4, 163, 255, 0.1);
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .category-leaders-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script define:vars={{ chartId, competitors, categories, colors, showAverage, showLeaders, competitorToggleId, averageToggleId, leadersToggleId, workerPath }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize the chart when ApexCharts is loaded
    if (typeof ApexCharts !== 'undefined') {
      initCompetitorStrengthChart();
    } else {
      // If ApexCharts is not loaded yet, wait for it
      window.addEventListener('ApexChartsLoaded', initCompetitorStrengthChart);
    }
    
    // Initialize average toggle
    const averageToggle = document.querySelector(`#${averageToggleId} input[type="checkbox"]`);
    if (averageToggle) {
      averageToggle.addEventListener('change', () => {
        updateAverage();
      });
    }
    
    // Initialize leaders toggle
    const leadersToggle = document.querySelector(`#${leadersToggleId} input[type="checkbox"]`);
    if (leadersToggle) {
      leadersToggle.addEventListener('change', () => {
        updateLeaders();
      });
    }
    
    // Function to update average line
    function updateAverage() {
      const chart = window[`${chartId}-instance`];
      const chartData = window[`${chartId}-data`];
      if (!chart || !chartData) return;
      
      const showAverage = document.querySelector(`#${averageToggleId} input[type="checkbox"]`).checked;
      
      // Update chart annotations
      chart.updateOptions({
        annotations: {
          points: showAverage ? chartData.avgScores.map((score, index) => ({
            x: chartData.labels[index],
            y: score,
            marker: {
              size: 4,
              fillColor: '#ffffff',
              strokeColor: '#ffffff',
              radius: 2
            },
            label: {
              borderColor: '#ffffff',
              style: {
                color: '#000000',
                background: '#ffffff'
              },
              text: 'Avg: ' + score.toFixed(1)
            }
          })) : []
        }
      });
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Industry average ${showAverage ? 'shown' : 'hidden'}`;
      }
    }
    
    // Function to update category leaders highlighting
    function updateLeaders() {
      const chart = window[`${chartId}-instance`];
      const chartData = window[`${chartId}-data`];
      if (!chart || !chartData) return;
      
      const showLeaders = document.querySelector(`#${leadersToggleId} input[type="checkbox"]`).checked;
      
      // Toggle visibility of category leaders container
      const categoryLeadersContainer = document.getElementById('category-leaders-container');
      if (categoryLeadersContainer) {
        categoryLeadersContainer.style.display = showLeaders ? 'block' : 'none';
      }
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Category leaders ${showLeaders ? 'shown' : 'hidden'}`;
      }
    }
    
    // Function to initialize the chart
    function initCompetitorStrengthChart() {
      // Create a worker for data processing
      const worker = new Worker(workerPath);
      
      // Send data to worker for processing
      worker.postMessage({
        action: 'prepareCompetitorData',
        competitors,
        categories,
        colors
      });
      
      // Handle worker response
      worker.onmessage = function(e) {
        if (e.data.action === 'competitorDataReady') {
          const chartData = e.data.chartData;
          renderChart(chartData);
          populateCompetitorSelect(chartData);
          updateStrengthRanking(chartData);
          updateCategoryLeaders(chartData);
          updateQDariaPosition(chartData);
          updateDataTable(chartData);
          
          // Store chart data for later use
          window[`${chartId}-data`] = chartData;
        }
      };
      
      // Function to render the chart
      function renderChart(chartData) {
        // Get chart options from utilities or create default options
        let options = window.chartUtils ? 
          window.chartUtils.getDefaultChartOptions('polarArea') : 
          getDefaultOptions();
        
        // Update options with chart-specific settings
        options = {
          ...options,
          chart: {
            ...options.chart,
            type: 'polarArea',
            height: 500,
            toolbar: {
              show: true
            }
          },
          series: chartData.series.map(series => series.data),
          labels: chartData.labels,
          colors: chartData.series.map(series => series.color),
          stroke: {
            width: 1,
            colors: ['#ffffff']
          },
          fill: {
            opacity: 0.8
          },
          legend: {
            show: true,
            position: 'bottom',
            horizontalAlign: 'center',
            labels: {
              colors: '#ffffff'
            },
            customLegendItems: chartData.series.map(series => series.name)
          },
          tooltip: {
            y: {
              formatter: function(val) {
                return val.toFixed(1);
              }
            }
          },
          yaxis: {
            show: false,
            min: 0,
            max: 10
          },
          plotOptions: {
            polarArea: {
              rings: {
                strokeWidth: 1,
                strokeColor: 'rgba(255, 255, 255, 0.2)'
              },
              spokes: {
                strokeWidth: 1,
                connectorColors: 'rgba(255, 255, 255, 0.2)'
              }
            }
          },
          annotations: {
            points: showAverage ? chartData.avgScores.map((score, index) => ({
              x: chartData.labels[index],
              y: score,
              marker: {
                size: 4,
                fillColor: '#ffffff',
                strokeColor: '#ffffff',
                radius: 2
              },
              label: {
                borderColor: '#ffffff',
                style: {
                  color: '#000000',
                  background: '#ffffff'
                },
                text: 'Avg: ' + score.toFixed(1)
              }
            })) : []
          }
        };
        
        // Create the chart
        const chart = new ApexCharts(document.querySelector(`#${chartId} .chart-container`), options);
        chart.render();
        
        // Store chart instance for later reference
        window[`${chartId}-instance`] = chart;
        
        // Update category leaders visibility
        updateLeaders();
        
        // Announce to screen readers
        const announcer = document.getElementById(`${chartId}-announcements`);
        if (announcer) {
          announcer.textContent = 'Competitor strength chart loaded. Use arrow keys to navigate between data points.';
        }
      }
      
      // Function to populate competitor select
      function populateCompetitorSelect(chartData) {
        const competitorSelect = document.querySelector(`#${competitorToggleId} select`);
        if (!competitorSelect) return;
        
        // Clear existing options
        competitorSelect.innerHTML = '';
        
        // Add options for each competitor
        chartData.series.forEach(series => {
          const option = document.createElement('option');
          option.value = series.name;
          option.textContent = series.name;
          option.selected = true;
          competitorSelect.appendChild(option);
        });
        
        // Add event listener
        competitorSelect.addEventListener('change', () => {
          const selectedCompetitors = Array.from(competitorSelect.selectedOptions).map(option => option.value);
          updateCompetitors(selectedCompetitors, chartData);
        });
      }
      
      // Function to update competitors
      function updateCompetitors(selectedCompetitors, chartData) {
        const chart = window[`${chartId}-instance`];
        if (!chart) return;
        
        // Filter series data
        const filteredSeries = chartData.series
          .filter(series => selectedCompetitors.includes(series.name))
          .map(series => series.data);
        
        const filteredColors = chartData.series
          .filter(series => selectedCompetitors.includes(series.name))
          .map(series => series.color);
        
        const filteredLegend = chartData.series
          .filter(series => selectedCompetitors.includes(series.name))
          .map(series => series.name);
        
        // Update chart
        chart.updateOptions({
          series: filteredSeries,
          colors: filteredColors,
          legend: {
            ...chart.opts.legend,
            customLegendItems: filteredLegend
          }
        });
        
        // Announce to screen readers
        const announcer = document.getElementById(`${chartId}-announcements`);
        if (announcer) {
          announcer.textContent = `Showing ${selectedCompetitors.length} competitors: ${selectedCompetitors.join(', ')}`;
        }
      }
      
      // Function to update strength ranking
      function updateStrengthRanking(chartData) {
        const tableBody = document.getElementById('strength-ranking-body');
        if (!tableBody) return;
        
        // Clear existing rows
        tableBody.innerHTML = '';
        
        // Calculate overall scores and find strongest/weakest categories
        const competitorData = chartData.series.map(series => {
          const name = series.name;
          const scores = series.data;
          const overallScore = scores.reduce((sum, score) => sum + score, 0) / scores.length;
          
          // Find strongest category
          const maxScore = Math.max(...scores);
          const maxIndex = scores.indexOf(maxScore);
          const strongestCategory = chartData.labels[maxIndex];
          
          // Find weakest category
          const minScore = Math.min(...scores);
          const minIndex = scores.indexOf(minScore);
          const weakestCategory = chartData.labels[minIndex];
          
          return {
            name,
            overallScore,
            strongestCategory,
            maxScore,
            weakestCategory,
            minScore
          };
        });
        
        // Sort by overall score (descending)
        competitorData.sort((a, b) => b.overallScore - a.overallScore);
        
        // Add rows for each competitor
        competitorData.forEach((competitor, index) => {
          const row = document.createElement('tr');
          
          // Rank
          const rankCell = document.createElement('td');
          rankCell.className = 'p-3 border-b border-primary-500/10';
          rankCell.textContent = (index + 1).toString();
          row.appendChild(rankCell);
          
          // Competitor name
          const nameCell = document.createElement('td');
          nameCell.className = 'p-3 border-b border-primary-500/10';
          nameCell.textContent = competitor.name;
          row.appendChild(nameCell);
          
          // Overall score
          const scoreCell = document.createElement('td');
          scoreCell.className = 'p-3 border-b border-primary-500/10';
          scoreCell.textContent = competitor.overallScore.toFixed(1);
          row.appendChild(scoreCell);
          
          // Strongest category
          const strongestCell = document.createElement('td');
          strongestCell.className = 'p-3 border-b border-primary-500/10';
          strongestCell.textContent = `${competitor.strongestCategory} (${competitor.maxScore.toFixed(1)})`;
          row.appendChild(strongestCell);
          
          // Weakest category
          const weakestCell = document.createElement('td');
          weakestCell.className = 'p-3 border-b border-primary-500/10';
          weakestCell.textContent = `${competitor.weakestCategory} (${competitor.minScore.toFixed(1)})`;
          row.appendChild(weakestCell);
          
          // Add row to table
          tableBody.appendChild(row);
        });
      }
      
      // Function to update category leaders
      function updateCategoryLeaders(chartData) {
        const categoryLeadersGrid = document.getElementById('category-leaders-grid');
        if (!categoryLeadersGrid) return;
        
        // Clear existing cards
        categoryLeadersGrid.innerHTML = '';
        
        // Find leader for each category
        chartData.labels.forEach((category, index) => {
          // Find highest score for this category
          let maxScore = -1;
          let leader = null;
          
          chartData.series.forEach(series => {
            const score = series.data[index];
            if (score > maxScore) {
              maxScore = score;
              leader = series.name;
            }
          });
          
          // Create card
          const card = document.createElement('div');
          card.className = 'category-leader-card';
          
          const categoryElement = document.createElement('div');
          categoryElement.className = 'category-name';
          categoryElement.textContent = category;
          
          const leaderElement = document.createElement('div');
          leaderElement.className = 'leader-name';
          leaderElement.textContent = leader;
          
          const scoreElement = document.createElement('div');
          scoreElement.className = 'leader-score';
          scoreElement.textContent = `Score: ${maxScore.toFixed(1)}`;
          
          card.appendChild(categoryElement);
          card.appendChild(leaderElement);
          card.appendChild(scoreElement);
          
          // Add card to grid
          categoryLeadersGrid.appendChild(card);
        });
        
        // Toggle visibility based on showLeaders
        const categoryLeadersContainer = document.getElementById('category-leaders-container');
        if (categoryLeadersContainer) {
          categoryLeadersContainer.style.display = showLeaders ? 'block' : 'none';
        }
      }
      
      // Function to update QDaria position
      function updateQDariaPosition(chartData) {
        const strengthsList = document.getElementById('qdaria-strengths-list');
        const improvementsList = document.getElementById('qdaria-improvements-list');
        
        if (!strengthsList || !improvementsList) return;
        
        // Clear existing lists
        strengthsList.innerHTML = '';
        improvementsList.innerHTML = '';
        
        // Find QDaria data
        const qdariaIndex = chartData.series.findIndex(series => series.name === 'QDaria');
        if (qdariaIndex === -1) {
          // QDaria not found
          const qdariaContainer = document.getElementById('qdaria-position-container');
          if (qdariaContainer) {
            qdariaContainer.style.display = 'none';
          }
          return;
        }
        
        const qdariaData = chartData.series[qdariaIndex].data;
        
        // Calculate average scores for each category
        const avgScores = chartData.avgScores;
        
        // Identify strengths and areas for improvement
        const strengths = [];
        const improvements = [];
        
        qdariaData.forEach((score, index) => {
          const category = chartData.labels[index];
          const avgScore = avgScores[index];
          
          if (score >= avgScore + 0.5) {
            // Strength: significantly above average
            strengths.push({
              category,
              score,
              avgScore,
              difference: score - avgScore
            });
          } else if (score <= avgScore - 0.5) {
            // Area for improvement: significantly below average
            improvements.push({
              category,
              score,
              avgScore,
              difference: avgScore - score
            });
          }
        });
        
        // Sort by difference (descending)
        strengths.sort((a, b) => b.difference - a.difference);
        improvements.sort((a, b) => b.difference - a.difference);
        
        // Add strengths to list
        strengths.forEach(strength => {
          const li = document.createElement('li');
          li.textContent = `${strength.category}: ${strength.score.toFixed(1)} (${strength.difference > 0 ? '+' : ''}${strength.difference.toFixed(1)} vs. industry avg)`;
          strengthsList.appendChild(li);
        });
        
        // Add areas for improvement to list
        improvements.forEach(improvement => {
          const li = document.createElement('li');
          li.textContent = `${improvement.category}: ${improvement.score.toFixed(1)} (${-improvement.difference.toFixed(1)} vs. industry avg)`;
          improvementsList.appendChild(li);
        });
      }
      
      // Function to update data table
      function updateDataTable(chartData) {
        const tableHead = document.querySelector(`#${chartId} table[slot="data-table"] thead tr`);
        const tableBody = document.getElementById('strength-table-body');
        
        if (!tableHead || !tableBody) return;
        
        // Clear existing headers (except first and last)
        while (tableHead.children.length > 2) {
          tableHead.removeChild(tableHead.children[1]);
        }
        
        // Add category headers
        chartData.labels.forEach(category => {
          const th = document.createElement('th');
          th.textContent = category;
          tableHead.insertBefore(th, tableHead.lastElementChild);
        });
        
        // Clear existing rows
        tableBody.innerHTML = '';
        
        // Add rows for each competitor
        chartData.series.forEach(series => {
          const row = document.createElement('tr');
          
          // Competitor name
          const nameCell = document.createElement('td');
          nameCell.textContent = series.name;
          row.appendChild(nameCell);
          
          // Category scores
          series.data.forEach(score => {
            const scoreCell = document.createElement('td');
            scoreCell.textContent = score.toFixed(1);
            row.appendChild(scoreCell);
          });
          
          // Overall score
          const overallScore = series.data.reduce((sum, score) => sum + score, 0) / series.data.length;
          const overallCell = document.createElement('td');
          overallCell.textContent = overallScore.toFixed(1);
          row.appendChild(overallCell);
          
          // Add row to table
          tableBody.appendChild(row);
        });
      }
      
      // Default options if chartUtils is not available
      function getDefaultOptions() {
        return {
          chart: {
            type: 'polarArea',
            fontFamily: 'Inter, system-ui, sans-serif',
            background: 'transparent',
            foreColor: '#ffffff',
            toolbar: {
              show: true
            }
          },
          tooltip: {
            enabled: true,
            theme: 'dark'
          },
          stroke: {
            width: 1,
            colors: ['#ffffff']
          }
        };
      }
    }
  });
</script>
