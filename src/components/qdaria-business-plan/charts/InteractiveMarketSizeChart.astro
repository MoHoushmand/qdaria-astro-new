---
import EnhancedChartBase from './EnhancedChartBase.astro';

interface Props {
  title?: string;
  description?: string;
}

const { title, description } = Astro.props;

// Market size data
const years = [2025, 2026, 2027, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035];
const marketSizes = [1.8, 2.5, 3.4, 4.6, 6.2, 8.3, 10.9, 13.5, 15.8, 17.2, 18.6];

// Calculate chart dimensions
const chartWidth = 700;
const chartHeight = 350;
const paddingLeft = 60;
const paddingRight = 40;
const paddingTop = 40;
const paddingBottom = 60;
const graphWidth = chartWidth - paddingLeft - paddingRight;
const graphHeight = chartHeight - paddingTop - paddingBottom;

// Calculate scales
const maxMarketSize = Math.max(...marketSizes) * 1.1; // Add 10% padding
const xScale = graphWidth / (years.length - 1);
const yScale = graphHeight / maxMarketSize;

// Generate path data
let pathData = `M ${paddingLeft} ${chartHeight - paddingBottom - marketSizes[0] * yScale}`;
for (let i = 1; i < years.length; i++) {
  pathData += ` L ${paddingLeft + i * xScale} ${chartHeight - paddingBottom - marketSizes[i] * yScale}`;
}

// Generate area data (for fill)
let areaData = pathData + 
  ` L ${paddingLeft + (years.length - 1) * xScale} ${chartHeight - paddingBottom}` +
  ` L ${paddingLeft} ${chartHeight - paddingBottom}` +
  ` Z`;
---

<EnhancedChartBase title={title} description={description}>
  <div class="interactive-market-chart" client:load>
    <svg width="100%" height="100%" viewBox={`0 0 ${chartWidth} ${chartHeight}`} preserveAspectRatio="xMidYMid meet">
      <!-- Background -->
      <rect x="0" y="0" width={chartWidth} height={chartHeight} fill="#020617" rx="10" ry="10" />
      
      <!-- Y-axis -->
      <line 
        x1={paddingLeft} 
        y1={paddingTop} 
        x2={paddingLeft} 
        y2={chartHeight - paddingBottom} 
        stroke="rgba(255, 255, 255, 0.2)" 
        stroke-width="1" 
      />
      
      <!-- X-axis -->
      <line 
        x1={paddingLeft} 
        y1={chartHeight - paddingBottom} 
        x2={chartWidth - paddingRight} 
        y2={chartHeight - paddingBottom} 
        stroke="rgba(255, 255, 255, 0.2)" 
        stroke-width="1" 
      />
      
      <!-- Y-axis labels -->
      <text x="20" y={chartHeight - paddingBottom} fill="white" font-size="12" text-anchor="middle">0</text>
      <text x="20" y={chartHeight - paddingBottom - (maxMarketSize / 2) * yScale} fill="white" font-size="12" text-anchor="middle">{Math.round(maxMarketSize / 2)}B</text>
      <text x="20" y={paddingTop} fill="white" font-size="12" text-anchor="middle">{Math.round(maxMarketSize)}B</text>
      
      <!-- X-axis labels (years) -->
      {years.map((year, i) => (
        i % 2 === 0 && (
          <text 
            x={paddingLeft + i * xScale} 
            y={chartHeight - paddingBottom + 20} 
            fill="white" 
            font-size="12" 
            text-anchor="middle"
          >
            {year}
          </text>
        )
      ))}
      
      <!-- Grid lines -->
      <line 
        x1={paddingLeft} 
        y1={chartHeight - paddingBottom - (maxMarketSize / 2) * yScale} 
        x2={chartWidth - paddingRight} 
        y2={chartHeight - paddingBottom - (maxMarketSize / 2) * yScale} 
        stroke="rgba(255, 255, 255, 0.1)" 
        stroke-width="1" 
        stroke-dasharray="5,5" 
      />
      
      <!-- Area fill -->
      <path 
        d={areaData} 
        fill="url(#marketGradient)" 
        opacity="0.3" 
      />
      
      <!-- Line -->
      <path 
        d={pathData} 
        fill="none" 
        stroke="#04a3ff" 
        stroke-width="3" 
        stroke-linecap="round" 
        stroke-linejoin="round" 
      />
      
      <!-- Data points -->
      {marketSizes.map((size, i) => (
        <g class="data-point" data-year={years[i]} data-value={size}>
          <circle 
            cx={paddingLeft + i * xScale} 
            cy={chartHeight - paddingBottom - size * yScale} 
            r="6" 
            fill="#04a3ff" 
            stroke="#020617" 
            stroke-width="2"
            tabindex="0"
            role="button"
            aria-label={`Year ${years[i]}: $${size} billion`}
          />
        </g>
      ))}
      
      <!-- Gradient definition -->
      <defs>
        <linearGradient id="marketGradient" x1="0%" y1="0%" x2="0%" y2="100%">
          <stop offset="0%" stop-color="#04a3ff" stop-opacity="0.8" />
          <stop offset="100%" stop-color="#04a3ff" stop-opacity="0.1" />
        </linearGradient>
      </defs>
    </svg>
    
    <!-- Tooltip -->
    <div class="chart-tooltip" aria-live="polite">
      <div class="tooltip-year"></div>
      <div class="tooltip-value"></div>
      <div class="tooltip-growth"></div>
    </div>
  </div>
</EnhancedChartBase>

<style>
  .interactive-market-chart {
    position: relative;
    height: 400px;
    width: 100%;
  }
  
  .data-point circle {
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .data-point circle:hover,
  .data-point circle:focus {
    r: 8;
    filter: brightness(1.3);
    outline: none;
  }
  
  .chart-tooltip {
    position: absolute;
    top: 0;
    left: 0;
    background: rgba(4, 163, 255, 0.2);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(4, 163, 255, 0.5);
    border-radius: 8px;
    padding: 10px;
    font-size: 14px;
    color: white;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 10;
    min-width: 150px;
    box-shadow: 0 0 15px rgba(4, 163, 255, 0.4);
  }
  
  .tooltip-year {
    font-weight: bold;
    font-size: 16px;
    margin-bottom: 5px;
    color: #04a3ff;
  }
  
  .tooltip-value {
    margin-bottom: 5px;
  }
  
  .tooltip-growth {
    color: #00ffd3;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const dataPoints = document.querySelectorAll('.data-point circle');
    const tooltip = document.querySelector('.chart-tooltip');
    const tooltipYear = document.querySelector('.tooltip-year');
    const tooltipValue = document.querySelector('.tooltip-value');
    const tooltipGrowth = document.querySelector('.tooltip-growth');
    
    // Market size data for calculations
    const marketSizes = [1.8, 2.5, 3.4, 4.6, 6.2, 8.3, 10.9, 13.5, 15.8, 17.2, 18.6];
    
    // Add keyboard navigation
    let currentFocus = -1;
    const focusablePoints = Array.from(dataPoints);
    
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight' || e.key === 'ArrowLeft') {
        e.preventDefault();
        
        if (currentFocus === -1) {
          currentFocus = 0;
        } else {
          if (e.key === 'ArrowRight') {
            currentFocus = Math.min(currentFocus + 1, focusablePoints.length - 1);
          } else {
            currentFocus = Math.max(currentFocus - 1, 0);
          }
        }
        
        focusablePoints[currentFocus].focus();
        showTooltip(focusablePoints[currentFocus]);
      }
      
      // Enter or Space to activate
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        if (currentFocus !== -1) {
          showTooltip(focusablePoints[currentFocus]);
        }
      }
    });
    
    // Add events to data points
    dataPoints.forEach((point, index) => {
      // Add focus event
      point.addEventListener('focus', () => {
        currentFocus = index;
        showTooltip(point);
      });
      
      // Add mouse events
      point.addEventListener('mouseenter', () => {
        showTooltip(point);
      });
      
      point.addEventListener('mouseleave', () => {
        hideTooltip();
      });
      
      // Add click event
      point.addEventListener('click', () => {
        showTooltip(point);
      });
    });
    
    function showTooltip(point) {
      const parent = point.closest('.data-point');
      const year = parent.dataset.year;
      const value = parseFloat(parent.dataset.value);
      const index = Array.from(dataPoints).indexOf(point);
      
      // Calculate growth rate
      let growthRate = '';
      if (index > 0) {
        const prevValue = marketSizes[index - 1];
        const growth = ((value - prevValue) / prevValue) * 100;
        growthRate = `Growth: +${growth.toFixed(1)}%`;
      }
      
      // Update tooltip content
      tooltipYear.textContent = `${year}`;
      tooltipValue.textContent = `Market Size: $${value}B`;
      tooltipGrowth.textContent = growthRate;
      
      // Position tooltip
      const rect = point.getBoundingClientRect();
      const chartRect = document.querySelector('.interactive-market-chart').getBoundingClientRect();
      
      const tooltipX = rect.left - chartRect.left - 75; // Center tooltip
      const tooltipY = rect.top - chartRect.top - 100; // Position above point
      
      tooltip.style.transform = `translate(${tooltipX}px, ${tooltipY}px)`;
      tooltip.style.opacity = '1';
    }
    
    function hideTooltip() {
      tooltip.style.opacity = '0';
    }
  });
</script>
