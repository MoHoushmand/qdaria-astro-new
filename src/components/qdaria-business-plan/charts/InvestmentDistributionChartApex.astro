---
import ApexChartWrapper from './ApexChartWrapper.astro';
import type { BaseChartProps } from '../../../types/chart';

interface Props extends BaseChartProps {
  className?: string;
  height?: number;
  width?: string;
  darkMode?: boolean;
  highContrastMode?: boolean;
  chartType?: 'bar' | 'column';
  stacked?: boolean;
  categories?: string[];
  values?: Record<string, Record<string, number>>;
  colors?: string[];
  years?: string[];
}

const { 
  id = `investment-distribution-chart-${Math.random().toString(36).substring(2, 9)}`,
  title = "QDaria Investment Distribution", 
  description = "Annual investment distribution across key categories showing growth and allocation priorities.",
  className = "",
  height = 500,
  width = "100%",
  darkMode = true,
  highContrastMode = false,
  chartType = 'column',
  stacked = false,
  categories,
  values,
  colors,
  years
} = Astro.props;

// Create a unique ID for the chart
const chartId = id;
const dataTableId = `${chartId}-data-table`;
const chartTypeToggleId = `${chartId}-chart-type-toggle`;
const stackedToggleId = `${chartId}-stacked-toggle`;

// Worker path for data processing
const workerPath = "/charts/investmentDistributionWorker.js";
---

<ApexChartWrapper
  id={chartId}
  title={title}
  description={description}
  className={className}
  height={height}
  width={width}
  darkMode={darkMode}
  highContrastMode={highContrastMode}
  dataTableId={dataTableId}
>
  <!-- Chart Controls -->
  <div class="chart-controls mb-4 flex flex-wrap gap-4">
    <!-- Chart Type Toggle -->
    <div class="chart-type-toggle" id={chartTypeToggleId}>
      <div class="toggle-label mb-1">Chart Type:</div>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="radio" name="chartType" value="column" checked={chartType === 'column'} />
          <span class="toggle-label ml-2">Column</span>
        </label>
        <label class="toggle-option flex items-center">
          <input type="radio" name="chartType" value="bar" checked={chartType === 'bar'} />
          <span class="toggle-label ml-2">Bar</span>
        </label>
      </div>
    </div>
    
    <!-- Stacked Toggle -->
    <div class="stacked-toggle" id={stackedToggleId}>
      <div class="toggle-label mb-1">Display Mode:</div>
      <div class="toggle-options flex gap-4">
        <label class="toggle-option flex items-center">
          <input type="radio" name="stacked" value="false" checked={!stacked} />
          <span class="toggle-label ml-2">Grouped</span>
        </label>
        <label class="toggle-option flex items-center">
          <input type="radio" name="stacked" value="true" checked={stacked} />
          <span class="toggle-label ml-2">Stacked</span>
        </label>
      </div>
    </div>
  </div>
  
  <!-- Chart container -->
  <div class="investment-chart-container">
    <div class="chart-container"></div>
  </div>
  
  <!-- Key Metrics -->
  <div class="key-metrics mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="metric total-investment">
      <div class="metric-label">Total Investment</div>
      <div class="metric-value" id="total-investment-value">$61M</div>
    </div>
    <div class="metric highest-category">
      <div class="metric-label">Highest Category (2029)</div>
      <div class="metric-value" id="highest-category-value">Hardware R&D ($18M)</div>
    </div>
    <div class="metric growth-rate">
      <div class="metric-label">Annual Growth Rate</div>
      <div class="metric-value" id="growth-rate-value">+45.2%</div>
    </div>
  </div>
  
  <!-- Year Breakdown -->
  <div class="year-breakdown mt-6">
    <h3 class="text-lg font-semibold mb-2">Investment by Year</h3>
    <div class="year-metrics grid grid-cols-2 md:grid-cols-5 gap-2" id="year-metrics-container">
      <!-- Year metrics will be populated by JavaScript -->
    </div>
  </div>
  
  <!-- Data table slot -->
  <table slot="data-table" class="chart-data-table-content">
    <thead>
      <tr>
        <th>Category</th>
        <th>2025</th>
        <th>2026</th>
        <th>2027</th>
        <th>2028</th>
        <th>2029</th>
        <th>Total</th>
      </tr>
    </thead>
    <tbody id="investment-table-body">
      <!-- Table rows will be populated by JavaScript -->
    </tbody>
  </table>
</ApexChartWrapper>

<style>
  .chart-controls {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
  }
  
  .toggle-label {
    font-weight: bold;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .toggle-option {
    display: flex;
    align-items: center;
    cursor: pointer;
  }
  
  .toggle-option input {
    margin-right: 0.5rem;
    cursor: pointer;
  }
  
  /* Chart Container */
  .investment-chart-container {
    position: relative;
    height: 400px;
    margin-bottom: 2rem;
  }
  
  .chart-container {
    width: 100%;
    height: 100%;
  }
  
  /* Key Metrics */
  .key-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
    margin: 1.5rem 0;
  }
  
  .metric {
    background: rgba(4, 163, 255, 0.1);
    border: 1px solid rgba(4, 163, 255, 0.3);
    border-radius: 0.5rem;
    padding: 1rem;
    text-align: center;
  }
  
  .metric-label {
    font-size: 0.875rem;
    color: rgba(255, 255, 255, 0.8);
    margin-bottom: 0.5rem;
  }
  
  .metric-value {
    font-size: 1.5rem;
    font-weight: bold;
    color: white;
  }
  
  .total-investment {
    background: rgba(4, 163, 255, 0.15);
    border-color: rgba(4, 163, 255, 0.4);
  }
  
  .highest-category {
    background: rgba(0, 255, 211, 0.15);
    border-color: rgba(0, 255, 211, 0.4);
  }
  
  .growth-rate {
    background: rgba(245, 183, 0, 0.15);
    border-color: rgba(245, 183, 0, 0.4);
  }
  
  /* Year Breakdown */
  .year-breakdown {
    margin-top: 1.5rem;
  }
  
  .year-metrics {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 0.5rem;
  }
  
  .year-metric {
    background: rgba(2, 6, 23, 0.5);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 0.5rem;
    padding: 0.75rem;
    text-align: center;
  }
  
  .year-label {
    font-size: 0.875rem;
    font-weight: bold;
    color: rgba(255, 255, 255, 0.9);
    margin-bottom: 0.25rem;
  }
  
  .year-value {
    font-size: 1.25rem;
    font-weight: bold;
    color: white;
  }
  
  .year-top-category {
    font-size: 0.75rem;
    color: rgba(255, 255, 255, 0.7);
    margin-top: 0.25rem;
  }
  
  /* Data table styles */
  .chart-data-table-content {
    width: 100%;
    border-collapse: collapse;
    color: white;
    background: rgba(2, 6, 23, 0.7);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .chart-data-table-content th, 
  .chart-data-table-content td {
    padding: 10px;
    text-align: left;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .chart-data-table-content th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  .chart-data-table-content tr:hover {
    background: rgba(4, 163, 255, 0.1);
  }
  
  /* Responsive styles */
  @media (max-width: 768px) {
    .key-metrics {
      grid-template-columns: 1fr;
    }
    
    .year-metrics {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script define:vars={{ chartId, chartType, stacked, categories, values, colors, years, chartTypeToggleId, stackedToggleId, workerPath }}>
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize the chart when ApexCharts is loaded
    if (typeof ApexCharts !== 'undefined') {
      initInvestmentDistributionChart();
    } else {
      // If ApexCharts is not loaded yet, wait for it
      window.addEventListener('ApexChartsLoaded', initInvestmentDistributionChart);
    }
    
    // Initialize chart type toggle
    const chartTypeRadios = document.querySelectorAll(`#${chartTypeToggleId} input[type="radio"]`);
    const stackedRadios = document.querySelectorAll(`#${stackedToggleId} input[type="radio"]`);
    
    chartTypeRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        updateChartOptions();
      });
    });
    
    stackedRadios.forEach(radio => {
      radio.addEventListener('change', () => {
        updateChartOptions();
      });
    });
    
    // Function to update chart options
    function updateChartOptions() {
      const chart = window[`${chartId}-instance`];
      if (!chart) return;
      
      const selectedType = document.querySelector(`#${chartTypeToggleId} input[name="chartType"]:checked`).value;
      const isStacked = document.querySelector(`#${stackedToggleId} input[name="stacked"]:checked`).value === 'true';
      
      // Update chart options
      chart.updateOptions({
        chart: {
          type: selectedType
        },
        plotOptions: {
          bar: {
            horizontal: selectedType === 'bar',
            columnWidth: '70%',
            dataLabels: {
              position: selectedType === 'bar' ? 'top' : 'center'
            }
          }
        },
        dataLabels: {
          enabled: !isStacked,
          formatter: function(val) {
            return '$' + val + 'M';
          }
        },
        tooltip: {
          shared: isStacked,
          intersect: !isStacked
        },
        xaxis: {
          labels: {
            rotate: selectedType === 'column' ? -45 : 0
          }
        }
      });
      
      // Announce to screen readers
      const announcer = document.getElementById(`${chartId}-announcements`);
      if (announcer) {
        announcer.textContent = `Chart type changed to ${selectedType} with ${isStacked ? 'stacked' : 'grouped'} display mode`;
      }
    }
    
    // Function to initialize the chart
    function initInvestmentDistributionChart() {
      // Create a worker for data processing
      const worker = new Worker(workerPath);
      
      // Send data to worker for processing
      worker.postMessage({
        action: 'prepareInvestmentData',
        categories,
        values,
        colors,
        years,
        stacked
      });
      
      // Handle worker response
      worker.onmessage = function(e) {
        if (e.data.action === 'investmentDataReady') {
          const chartData = e.data.chartData;
          renderChart(chartData);
          updateMetrics(chartData);
          populateYearBreakdown(chartData);
          populateDataTable(chartData);
        }
      };
      
      // Function to render the chart
      function renderChart(chartData) {
        // Get chart options from utilities or create default options
        let options = window.chartUtils ? 
          window.chartUtils.getDefaultChartOptions(chartType) : 
          getDefaultOptions();
        
        // Update options with chart-specific settings
        options = {
          ...options,
          chart: {
            ...options.chart,
            type: chartType,
            stacked: chartData.stacked,
            toolbar: {
              show: true,
              tools: {
                download: true,
                selection: false,
                zoom: true,
                zoomin: true,
                zoomout: true,
                pan: false,
                reset: true
              }
            }
          },
          series: chartData.series,
          colors: chartData.colors,
          xaxis: {
            categories: chartData.categories,
            labels: {
              rotate: chartType === 'column' ? -45 : 0,
              style: {
                colors: Array(chartData.categories.length).fill('#ffffff')
              }
            },
            title: {
              text: 'Year',
              style: {
                color: '#ffffff'
              }
            }
          },
          yaxis: {
            title: {
              text: 'Investment ($ Millions)',
              style: {
                color: '#ffffff'
              }
            },
            labels: {
              formatter: function(val) {
                return '$' + val + 'M';
              },
              style: {
                colors: ['#ffffff']
              }
            }
          },
          plotOptions: {
            bar: {
              horizontal: chartType === 'bar',
              columnWidth: '70%',
              dataLabels: {
                position: chartType === 'bar' ? 'top' : 'center'
              }
            }
          },
          dataLabels: {
            enabled: !chartData.stacked,
            formatter: function(val) {
              return '$' + val + 'M';
            },
            style: {
              fontSize: '12px',
              fontFamily: 'Inter, sans-serif',
              fontWeight: 'bold',
              colors: [chartType === 'bar' ? '#ffffff' : '#000000']
            },
            background: {
              enabled: true,
              foreColor: '#000000',
              borderRadius: 2,
              padding: 4,
              opacity: 0.9,
              borderWidth: 1,
              borderColor: '#ffffff'
            },
            dropShadow: {
              enabled: false
            }
          },
          stroke: {
            width: 1,
            colors: ['#ffffff']
          },
          fill: {
            opacity: 0.9
          },
          legend: {
            position: 'top',
            horizontalAlign: 'center',
            labels: {
              colors: '#ffffff'
            }
          },
          tooltip: {
            shared: chartData.stacked,
            intersect: !chartData.stacked,
            y: {
              formatter: function(val) {
                return '$' + val + 'M';
              }
            }
          },
          grid: {
            borderColor: 'rgba(255, 255, 255, 0.1)',
            row: {
              colors: ['transparent', 'rgba(255, 255, 255, 0.05)']
            }
          },
          annotations: {
            yaxis: [{
              y: 10,
              borderColor: '#00ffd3',
              label: {
                borderColor: '#00ffd3',
                style: {
                  color: '#000',
                  background: '#00ffd3'
                },
                text: 'Key Investment Threshold'
              }
            }]
          },
          responsive: [
            {
              breakpoint: 480,
              options: {
                chart: {
                  height: 350
                },
                legend: {
                  position: 'bottom'
                }
              }
            }
          ]
        };
        
        // Create the chart
        const chart = new ApexCharts(document.querySelector(`#${chartId} .chart-container`), options);
        chart.render();
        
        // Store chart instance for later reference
        window[`${chartId}-instance`] = chart;
        
        // Announce to screen readers
        const announcer = document.getElementById(`${chartId}-announcements`);
        if (announcer) {
          announcer.textContent = 'Investment distribution chart loaded. Use arrow keys to navigate between data points.';
        }
      }
      
      // Function to update key metrics
      function updateMetrics(chartData) {
        // Update total investment
        const totalInvestmentElement = document.getElementById('total-investment-value');
        if (totalInvestmentElement) {
          totalInvestmentElement.textContent = `$${chartData.metrics.totalInvestment.toFixed(1)}M`;
        }
        
        // Update highest category
        const highestCategoryElement = document.getElementById('highest-category-value');
        if (highestCategoryElement) {
          const lastYearIndex = chartData.metrics.highestInvestments.length - 1;
          const { category, value } = chartData.metrics.highestInvestments[lastYearIndex];
          highestCategoryElement.textContent = `${category} ($${value.toFixed(1)}M)`;
        }
        
        // Update growth rate
        const growthRateElement = document.getElementById('growth-rate-value');
        if (growthRateElement) {
          // Calculate average growth rate
          let avgGrowthRate = 0;
          if (chartData.metrics.growthRates.length > 0) {
            const totalGrowth = chartData.metrics.growthRates.reduce((sum, item) => {
              return sum + (isNaN(parseFloat(item.rate)) ? 0 : parseFloat(item.rate));
            }, 0);
            avgGrowthRate = totalGrowth / chartData.metrics.growthRates.length;
          }
          
          growthRateElement.textContent = `${avgGrowthRate > 0 ? '+' : ''}${avgGrowthRate.toFixed(1)}%`;
        }
      }
      
      // Function to populate year breakdown
      function populateYearBreakdown(chartData) {
        const yearMetricsContainer = document.getElementById('year-metrics-container');
        if (!yearMetricsContainer) return;
        
        // Clear existing content
        yearMetricsContainer.innerHTML = '';
        
        // Add metrics for each year
        chartData.categories.forEach((year, index) => {
          const yearTotal = chartData.metrics.yearlyTotals[index];
          const highestInvestment = chartData.metrics.highestInvestments[index];
          
          const yearMetric = document.createElement('div');
          yearMetric.className = 'year-metric';
          
          yearMetric.innerHTML = `
            <div class="year-label">${year}</div>
            <div class="year-value">$${yearTotal.toFixed(1)}M</div>
            <div class="year-top-category">${highestInvestment.category}</div>
          `;
          
          yearMetricsContainer.appendChild(yearMetric);
        });
      }
      
      // Function to populate data table
      function populateDataTable(chartData) {
        const tableBody = document.getElementById('investment-table-body');
        if (!tableBody) return;
        
        // Clear existing rows
        tableBody.innerHTML = '';
        
        // Add rows for each category
        chartData.series.forEach((series, index) => {
          const row = document.createElement('tr');
          
          // Create category cell with color indicator
          const categoryCell = document.createElement('td');
          categoryCell.innerHTML = `
            <div style="display: flex; align-items: center;">
              <span style="display: inline-block; width: 12px; height: 12px; background-color: ${series.color}; margin-right: 8px; border-radius: 2px;"></span>
              ${series.name}
            </div>
          `;
          
          row.appendChild(categoryCell);
          
          // Add cells for each year
          let categoryTotal = 0;
          series.data.forEach((value, yearIndex) => {
            const valueCell = document.createElement('td');
            valueCell.textContent = `$${value.toFixed(1)}M`;
            row.appendChild(valueCell);
            categoryTotal += value;
          });
          
          // Add total cell
          const totalCell = document.createElement('td');
          totalCell.textContent = `$${categoryTotal.toFixed(1)}M`;
          totalCell.style.fontWeight = 'bold';
          row.appendChild(totalCell);
          
          // Add row to table
          tableBody.appendChild(row);
        });
        
        // Add totals row
        const totalsRow = document.createElement('tr');
        totalsRow.style.fontWeight = 'bold';
        
        // Create header cell
        const headerCell = document.createElement('td');
        headerCell.textContent = 'Total';
        totalsRow.appendChild(headerCell);
        
        // Add cells for each year total
        chartData.metrics.yearlyTotals.forEach(total => {
          const totalCell = document.createElement('td');
          totalCell.textContent = `$${total.toFixed(1)}M`;
          totalsRow.appendChild(totalCell);
        });
        
        // Add grand total cell
        const grandTotalCell = document.createElement('td');
        grandTotalCell.textContent = `$${chartData.metrics.totalInvestment.toFixed(1)}M`;
        totalsRow.appendChild(grandTotalCell);
        
        // Add totals row to table
        tableBody.appendChild(totalsRow);
      }
      
      // Default options if chartUtils is not available
      function getDefaultOptions() {
        return {
          chart: {
            type: chartType,
            fontFamily: 'Inter, system-ui, sans-serif',
            background: 'transparent',
            foreColor: '#ffffff',
            toolbar: {
              show: true
            }
          },
          tooltip: {
            enabled: true,
            theme: 'dark'
          },
          stroke: {
            width: 1,
            colors: ['#ffffff']
          }
        };
      }
    }
  });
</script>
