---
interface Props {
  id: string;
  title?: string;
  description?: string;
  chartType: 'line' | 'bar' | 'radar' | 'pie' | 'doughnut';
  chartData: string; // JSON stringified data
  chartOptions?: string; // JSON stringified options
}

const { id, title, description, chartType, chartData, chartOptions = '{}' } = Astro.props;
---

<div class="chart-container">
  {title && <h4 class="text-gradient-blue text-xl font-semibold mb-4">{title}</h4>}
  <div class="chart-content">
    <canvas id={id} class="w-full h-full"></canvas>
  </div>
  {description && <p class="text-base text-gray-400 mt-4 italic text-sm">{description}</p>}
</div>

<style>
  .chart-container {
    @apply relative rounded-2xl border border-primary-500/30 bg-dark-bg/80 backdrop-blur-sm transition-all duration-500 overflow-visible;
    box-shadow: 0 0 25px rgba(4, 163, 255, 0.4);
    @apply m-8 p-10 max-w-[800px] w-full;

    &:hover {
      box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      transform: translateY(-4px) scale(1.02);
      @apply border-primary-500/50 bg-dark-bg/90;
      animation: pulse-card 2s ease-in-out infinite;
    }

    @keyframes pulse-card {
      0%, 100% {
        box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      }
      50% {
        box-shadow: 0 0 70px rgba(4, 163, 255, 0.8);
      }
    }

    &::before {
      content: "";
      @apply absolute inset-0 rounded-2xl;
      background: radial-gradient(
        800px circle at var(--mouse-x, 0) var(--mouse-y, 0),
        rgba(4, 163, 255, 0.15),
        transparent 40%
      );
      opacity: 0;
      transition: opacity 0.5s;
    }

    &:hover::before {
      opacity: 1;
    }
  }

  .chart-content {
    @apply h-[400px] w-full;
  }

  .text-gradient-blue {
    @apply bg-gradient-to-r from-[#04a3ff] via-[#00ffd3] to-[#65ff00] bg-clip-text text-transparent;
    filter: brightness(1.8) saturate(1.4);
    text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    animation: pulse-gradient 4s ease-in-out infinite;
  }

  @keyframes pulse-gradient {
    0%, 100% {
      filter: brightness(1.8) saturate(1.4);
      text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    }
    50% {
      filter: brightness(2) saturate(1.6);
      text-shadow: 0 0 40px rgba(4, 163, 255, 0.5);
    }
  }
</style>

<script is:inline src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script define:vars={{ id, chartType, chartData, chartOptions }}>
  // Add mouse tracking for hover effect
  document.querySelectorAll('.chart-container').forEach((card) => {
    card.addEventListener('mousemove', (e) => {
      const rect = card.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      card.style.setProperty('--mouse-x', `${x}px`);
      card.style.setProperty('--mouse-y', `${y}px`);
    });
  });

  // Create the chart
  document.addEventListener('DOMContentLoaded', () => {
    const ctx = document.getElementById(id);
    if (!ctx) return;
    
    const data = JSON.parse(chartData);
    const options = JSON.parse(chartOptions);
    
    new Chart(ctx, {
      type: chartType,
      data: data,
      options: options
    });
  });
</script>
