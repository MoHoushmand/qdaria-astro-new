---
import EnhancedChartBase from './EnhancedChartBase.astro';

// Risk data
const risks = [
  { 
    category: 'Technical', 
    inherentRisk: 90, 
    mitigatedRisk: 60,
    probability: 80,
    impact: 100,
    description: 'The success of QDaria hinges on quantum computing technology advancing as expected and our ability to integrate it with AI.',
    mitigation: 'We remain hardware-flexible (able to switch to any promising quantum tech) and invest in simulations and error mitigation research. We also focus on hybrid solutions (quantum+classical).'
  },
  { 
    category: 'Market Adoption', 
    inherentRisk: 80, 
    mitigatedRisk: 50,
    probability: 70,
    impact: 90,
    description: 'The market may take time to adopt quantum solutions or may be skeptical of AI-driven systems.',
    mitigation: 'By offering low-barrier services (like rentals and free trials of AI assistants) we encourage early usage. We also continuously educate the market through workshops and whitepapers.'
  },
  { 
    category: 'Competitive', 
    inherentRisk: 60, 
    mitigatedRisk: 40,
    probability: 80,
    impact: 50,
    description: 'While competition is strong, our niche focus gives us some insulation for now. However, the risk can increase if a major competitor replicates our model.',
    mitigation: 'We actively monitor competitors and patent our key innovations (IP strategy) to defend our space. Building a loyal user community early will create switching costs.'
  },
  { 
    category: 'Financial', 
    inherentRisk: 80, 
    mitigatedRisk: 55,
    probability: 70,
    impact: 90,
    description: 'As a startup planning aggressive growth, we need substantial capital. Risk of not securing needed funding or unfavorable public markets by our IPO time is a concern.',
    mitigation: 'We maintain financial discipline to extend our runway and have backup plans such as strategic partnerships or earlier revenue generation to sustain operations if fundraising is delayed.'
  },
  { 
    category: 'Execution/Team', 
    inherentRisk: 50, 
    mitigatedRisk: 30,
    probability: 40,
    impact: 70,
    description: 'Our team is strong but small, and the breadth of our project is challenging.',
    mitigation: 'We prioritize key milestones and phase projects to avoid overextension. We are actively building a culture that attracts top talent by offering exciting challenges at the convergence of AI and quantum.'
  }
];

// Chart dimensions
const chartWidth = 800;
const chartHeight = 600;
const centerX = chartWidth / 2;
const centerY = chartHeight / 2;
const radius = Math.min(centerX, centerY) - 100;

// Calculate points for the radar chart
function calculateRadarPoints(values, maxValue = 100) {
  const points = [];
  const angleStep = (2 * Math.PI) / values.length;
  
  for (let i = 0; i < values.length; i++) {
    const angle = i * angleStep - Math.PI / 2; // Start from top (- PI/2)
    const value = values[i];
    const distance = (value / maxValue) * radius;
    const x = centerX + distance * Math.cos(angle);
    const y = centerY + distance * Math.sin(angle);
    points.push({ x, y });
  }
  
  return points;
}

// Create radar chart axes
function createAxes(categories) {
  const axes = [];
  const angleStep = (2 * Math.PI) / categories.length;
  
  for (let i = 0; i < categories.length; i++) {
    const angle = i * angleStep - Math.PI / 2; // Start from top (- PI/2)
    const endX = centerX + radius * Math.cos(angle);
    const endY = centerY + radius * Math.sin(angle);
    const labelX = centerX + (radius + 30) * Math.cos(angle);
    const labelY = centerY + (radius + 30) * Math.sin(angle);
    axes.push({ 
      line: { x1: centerX, y1: centerY, x2: endX, y2: endY }, 
      label: { x: labelX, y: labelY, text: categories[i] } 
    });
  }
  
  return axes;
}

// Generate SVG path for a polygon
function createPolygonPath(points) {
  let path = `M ${points[0].x} ${points[0].y}`;
  
  for (let i = 1; i < points.length; i++) {
    path += ` L ${points[i].x} ${points[i].y}`;
  }
  
  path += ' Z'; // Close the path
  return path;
}

// Create radar circles for scale
function createRadarCircles() {
  const circles = [];
  for (let i = 1; i <= 5; i++) {
    const circleRadius = (i / 5) * radius;
    circles.push({ r: circleRadius, value: i * 20 }); // Scale 20, 40, 60, 80, 100
  }
  return circles;
}

// Generate data
const categories = risks.map(risk => risk.category);
const inherentRiskValues = risks.map(risk => risk.inherentRisk);
const mitigatedRiskValues = risks.map(risk => risk.mitigatedRisk);

const axes = createAxes(categories);
const radarCircles = createRadarCircles();

const inherentRiskPoints = calculateRadarPoints(inherentRiskValues);
const mitigatedRiskPoints = calculateRadarPoints(mitigatedRiskValues);

const inherentRiskPath = createPolygonPath(inherentRiskPoints);
const mitigatedRiskPath = createPolygonPath(mitigatedRiskPoints);
---

<EnhancedChartBase title="Advanced Risk Assessment Analysis" description="Interactive comparison of inherent risks versus mitigated risks across key business dimensions">
  <div class="risk-assessment-chart">
    <div class="chart-controls">
      <div class="legend-item">
        <span class="legend-color inherent"></span>
        <span class="legend-text">Inherent Risk</span>
      </div>
      <div class="legend-item">
        <span class="legend-color mitigated"></span>
        <span class="legend-text">Mitigated Risk</span>
      </div>
    </div>
    
    <div class="chart-container">
      <svg width="100%" height="100%" viewBox={`0 0 ${chartWidth} ${chartHeight}`} preserveAspectRatio="xMidYMid meet">
        <!-- Background -->
        <rect x="0" y="0" width={chartWidth} height={chartHeight} fill="#020617" rx="10" ry="10" />
        
        <!-- Radar circles (scale) -->
        {radarCircles.map((circle) => (
          <g>
            <circle 
              cx={centerX} 
              cy={centerY} 
              r={circle.r} 
              fill="none" 
              stroke="rgba(255, 255, 255, 0.1)" 
              stroke-width="1" 
              stroke-dasharray="5,5" 
            />
            <text 
              x={centerX} 
              y={centerY - circle.r + 15} 
              fill="rgba(255, 255, 255, 0.5)" 
              font-size="10" 
              text-anchor="middle"
            >
              {circle.value}%
            </text>
          </g>
        ))}
        
        <!-- Radar axes -->
        {axes.map((axis) => (
          <g>
            <line 
              x1={axis.line.x1} 
              y1={axis.line.y1} 
              x2={axis.line.x2} 
              y2={axis.line.y2} 
              stroke="rgba(255, 255, 255, 0.3)" 
              stroke-width="1" 
            />
            <text 
              x={axis.label.x} 
              y={axis.label.y} 
              fill="white" 
              font-size="14" 
              text-anchor="middle" 
              dominant-baseline="middle"
              class="axis-label"
              data-category={axis.label.text}
            >
              {axis.label.text}
            </text>
          </g>
        ))}
        
        <!-- Risk polygons -->
        <g class="risk-polygons">
          <!-- Inherent risk -->
          <path 
            d={inherentRiskPath} 
            fill="rgba(239, 68, 68, 0.3)" 
            stroke="rgba(239, 68, 68, 0.9)" 
            stroke-width="3" 
            stroke-linejoin="round" 
            class="inherent-risk-path"
          />
          
          <!-- Mitigated risk -->
          <path 
            d={mitigatedRiskPath} 
            fill="rgba(4, 163, 255, 0.3)" 
            stroke="rgba(4, 163, 255, 0.9)" 
            stroke-width="3" 
            stroke-linejoin="round" 
            class="mitigated-risk-path"
          />
          
          <!-- Risk data points -->
          {inherentRiskPoints.map((point, i) => (
            <circle 
              cx={point.x} 
              cy={point.y} 
              r="6" 
              fill="#2a2a2a" 
              stroke="rgba(239, 68, 68, 0.9)" 
              stroke-width="2" 
              class="risk-point inherent-risk-point" 
              data-index={i}
            />
          ))}
          
          {mitigatedRiskPoints.map((point, i) => (
            <circle 
              cx={point.x} 
              cy={point.y} 
              r="6" 
              fill="#2a2a2a" 
              stroke="rgba(4, 163, 255, 0.9)" 
              stroke-width="2" 
              class="risk-point mitigated-risk-point" 
              data-index={i}
            />
          ))}
        </g>
      </svg>
    </div>
    
    <div class="risk-details-container">
      <h4 class="text-gradient-blue text-lg font-semibold mb-2">Risk Analysis by Category</h4>
      <div class="risk-grid">
        {risks.map((risk) => (
          <div class="risk-card" data-category={risk.category}>
            <h5 class="text-primary-400 font-bold">{risk.category} Risk</h5>
            
            <div class="risk-metrics">
              <div class="risk-metric">
                <span class="risk-label">Inherent Risk:</span>
                <div class="risk-bar-container">
                  <div class="risk-bar inherent" style={`width: ${risk.inherentRisk}%`}></div>
                  <span class="risk-value">{risk.inherentRisk}%</span>
                </div>
              </div>
              
              <div class="risk-metric">
                <span class="risk-label">Mitigated Risk:</span>
                <div class="risk-bar-container">
                  <div class="risk-bar mitigated" style={`width: ${risk.mitigatedRisk}%`}></div>
                  <span class="risk-value">{risk.mitigatedRisk}%</span>
                </div>
              </div>
              
              <div class="risk-improvement">
                Risk reduction: {risk.inherentRisk - risk.mitigatedRisk}% ({((risk.inherentRisk - risk.mitigatedRisk) / risk.inherentRisk * 100).toFixed(1)}% improvement)
              </div>
            </div>
            
            <div class="risk-description">
              <p>{risk.description}</p>
              <p class="risk-mitigation"><span>Mitigation:</span> {risk.mitigation}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</EnhancedChartBase>

<style>
  .risk-assessment-chart {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .chart-controls {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .legend-color {
    width: 16px;
    height: 16px;
    border-radius: 3px;
  }
  
  .legend-color.inherent {
    background-color: rgba(239, 68, 68, 0.9);
  }
  
  .legend-color.mitigated {
    background-color: rgba(4, 163, 255, 0.9);
  }
  
  .legend-text {
    color: white;
    font-size: 14px;
  }
  
  .chart-container {
    width: 100%;
    height: 500px;
    margin-bottom: 30px;
  }
  
  .axis-label {
    transition: all 0.3s ease;
  }
  
  .risk-point {
    transition: all 0.3s ease;
    cursor: pointer;
  }
  
  .risk-point:hover {
    r: 8;
    filter: brightness(1.3);
  }
  
  .risk-details-container {
    width: 100%;
    max-width: 900px;
  }
  
  .risk-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }
  
  .risk-card {
    background: rgba(0, 0, 0, 0.3);
    border: 1px solid rgba(4, 163, 255, 0.3);
    border-radius: 10px;
    padding: 16px;
    transition: all 0.3s ease;
  }
  
  .risk-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(4, 163, 255, 0.2);
    border-color: rgba(4, 163, 255, 0.5);
  }
  
  .risk-metrics {
    margin: 12px 0;
  }
  
  .risk-metric {
    margin-bottom: 8px;
  }
  
  .risk-label {
    font-size: 13px;
    color: rgba(255, 255, 255, 0.7);
    display: block;
    margin-bottom: 3px;
  }
  
  .risk-bar-container {
    display: flex;
    align-items: center;
    gap: 10px;
  }
  
  .risk-bar {
    height: 8px;
    border-radius: 4px;
    background-color: rgba(4, 163, 255, 0.8);
    transition: width 1s ease;
  }
  
  .risk-bar.inherent {
    background-color: rgba(239, 68, 68, 0.8);
  }
  
  .risk-value {
    font-size: 13px;
    font-weight: bold;
    color: white;
  }
  
  .risk-improvement {
    font-size: 12px;
    color: rgba(4, 163, 255, 0.9);
    font-style: italic;
    margin-top: 5px;
    text-align: right;
  }
  
  .risk-description {
    font-size: 14px;
    color: rgba(255, 255, 255, 0.8);
    margin-top: 10px;
    line-height: 1.5;
  }
  
  .risk-mitigation {
    margin-top: 10px;
    font-size: 14px;
    color: rgba(255, 255, 255, 0.8);
  }
  
  .risk-mitigation span {
    color: rgba(4, 163, 255, 0.9);
    font-weight: bold;
  }
  
  @media (max-width: 768px) {
    .risk-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const riskCards = document.querySelectorAll('.risk-card');
    const axisLabels = document.querySelectorAll('.axis-label');
    
    // Highlight risk card when hovering over axis label
    axisLabels.forEach(label => {
      label.addEventListener('mouseenter', () => {
        const category = label.getAttribute('data-category');
        highlightCategory(category);
      });
      
      label.addEventListener('mouseleave', () => {
        resetHighlights();
      });
    });
    
    // Highlight matching axis when hovering over risk card
    riskCards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        const category = card.getAttribute('data-category');
        highlightCategory(category);
      });
      
      card.addEventListener('mouseleave', () => {
        resetHighlights();
      });
    });
    
    function highlightCategory(category) {
      // Highlight the axis label
      axisLabels.forEach(label => {
        if (label.getAttribute('data-category') === category) {
          label.setAttribute('font-size', '16');
          label.setAttribute('font-weight', 'bold');
          label.setAttribute('fill', '#04a3ff');
        } else {
          label.setAttribute('fill', 'rgba(255, 255, 255, 0.3)');
        }
      });
      
      // Highlight the risk card
      riskCards.forEach(card => {
        if (card.getAttribute('data-category') === category) {
          card.style.transform = 'translateY(-5px) scale(1.03)';
          card.style.boxShadow = '0 10px 30px rgba(4, 163, 255, 0.4)';
          card.style.borderColor = 'rgba(4, 163, 255, 0.8)';
          card.style.background = 'rgba(4, 163, 255, 0.1)';
        } else {
          card.style.opacity = '0.5';
        }
      });
    }
    
    function resetHighlights() {
      axisLabels.forEach(label => {
        label.setAttribute('font-size', '14');
        label.setAttribute('font-weight', 'normal');
        label.setAttribute('fill', 'white');
      });
      
      riskCards.forEach(card => {
        card.style.transform = '';
        card.style.boxShadow = '';
        card.style.borderColor = 'rgba(4, 163, 255, 0.3)';
        card.style.background = 'rgba(0, 0, 0, 0.3)';
        card.style.opacity = '1';
      });
    }
  });
</script>