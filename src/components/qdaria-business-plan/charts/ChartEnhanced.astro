---
interface Props {
  id: string;
  title: string;
  description: string;
  type: 'roadmap' | 'swot' | 'market-size' | 'revenue';
  darkMode?: boolean;
  'client:load'?: boolean;
}

const { id, title, description, type, darkMode = true, 'client:load': clientLoad = true } = Astro.props;

// Import the appropriate enhanced chart component based on type
let chartComponent;
switch (type) {
  case 'roadmap':
    chartComponent = 'RoadmapChartEnhanced';
    break;
  case 'swot':
    chartComponent = 'SWOTChartEnhanced';
    break;
  case 'market-size':
    chartComponent = 'MarketSizeChartEnhanced';
    break;
  case 'revenue':
    chartComponent = 'RevenueChartEnhanced';
    break;
  default:
    chartComponent = null;
}
---

<div class="chart-enhanced feature-card rounded-xl p-8 transition-transform duration-300 hover:scale-105">
  <h3 class="mb-4 text-2xl font-bold text-white">{title}</h3>
  <p class="text-base-300 mb-6">{description}</p>
  
  <div class="relative w-full">
    {chartComponent === 'RoadmapChartEnhanced' && (
      <div id={`roadmap-chart-${id}`}>
        <Astro.slots.default />
      </div>
    )}

    {chartComponent === 'SWOTChartEnhanced' && (
      <div id={`swot-chart-${id}`}>
        <Astro.slots.default />
      </div>
    )}
    
    {chartComponent === 'MarketSizeChartEnhanced' && (
      <div id={`market-size-chart-${id}`}>
        <Astro.slots.default />
      </div>
    )}
    
    {chartComponent === 'RevenueChartEnhanced' && (
      <div id={`revenue-chart-${id}`}>
        <Astro.slots.default />
      </div>
    )}
  </div>
</div>

<style>
  .feature-card {
    @apply relative rounded-2xl border border-primary-500/30 bg-dark-bg/80 backdrop-blur-sm transition-all duration-500 overflow-visible;
    box-shadow: 0 0 25px rgba(4, 163, 255, 0.4);

    &:hover {
      box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      transform: translateY(-4px) scale(1.02);
      @apply border-primary-500/50 bg-dark-bg/90;
      animation: pulse-card 2s ease-in-out infinite;
    }

    @keyframes pulse-card {
      0%,
      100% {
        box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      }
      50% {
        box-shadow: 0 0 70px rgba(4, 163, 255, 0.8);
      }
    }

    &::before {
      content: "";
      @apply absolute inset-0 rounded-2xl;
      background: radial-gradient(
        800px circle at var(--mouse-x, 0) var(--mouse-y, 0),
        rgba(4, 163, 255, 0.15),
        transparent 40%
      );
      opacity: 0;
      transition: opacity 0.5s;
    }

    &:hover::before {
      opacity: 1;
    }
  }

  /* Override any chart-specific default styles */
  .chart-enhanced :global(.chart-container) {
    @apply rounded-lg bg-dark-bg/50 backdrop-blur-sm;
    border: 1px solid rgba(4, 163, 255, 0.2);
  }
  
  /* Override dark mode */
  .chart-enhanced :global(.bg-white) {
    @apply bg-dark-bg/80 !important;
  }
  
  .chart-enhanced :global(.text-gray-900),
  .chart-enhanced :global(.text-gray-800),
  .chart-enhanced :global(.text-gray-700) {
    @apply text-gray-200 !important;
  }
  
  .chart-enhanced :global(.text-gray-600),
  .chart-enhanced :global(.text-gray-500) {
    @apply text-gray-400 !important;
  }
  
  .chart-enhanced :global(.border-gray-200) {
    @apply border-gray-700 !important;
  }
  
  /* Make text selectable */
  .chart-enhanced {
    user-select: text !important;
  }
  
  .chart-enhanced * {
    user-select: text !important;
  }
</style>

<script>
  // Add mouse tracking for hover effect
  document.querySelectorAll('.feature-card').forEach((card) => {
    card.addEventListener('mousemove', (e: Event) => {
      const mouseEvent = e as MouseEvent;
      const rect = (card as HTMLElement).getBoundingClientRect();
      const x = mouseEvent.clientX - rect.left;
      const y = mouseEvent.clientY - rect.top;
      (card as HTMLElement).style.setProperty('--mouse-x', `${x}px`);
      (card as HTMLElement).style.setProperty('--mouse-y', `${y}px`);
    });
  });
</script>