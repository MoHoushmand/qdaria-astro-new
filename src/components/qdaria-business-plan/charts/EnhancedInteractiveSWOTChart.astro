---
import EnhancedChartBase from './EnhancedChartBase.astro';

interface Props {
  title?: string;
  description?: string;
}

const { title, description } = Astro.props;

// SWOT data
const strengths = [
  { title: "Unique Technology", description: "QDaria's proprietary quantum algorithms provide a significant competitive edge with 30% better performance than industry standards." },
  { title: "Team Expertise", description: "Our team includes 5 PhDs in quantum computing and 3 AI specialists with combined 40+ years of experience." },
  { title: "Focused Strategy", description: "Clear roadmap targeting high-value verticals first, with planned expansion into broader markets." },
  { title: "IP Portfolio", description: "12 pending patents covering our core quantum-AI integration technologies." }
];

const weaknesses = [
  { title: "Startup Scale", description: "Limited resources compared to tech giants investing in quantum computing (Google, IBM, Microsoft)." },
  { title: "Unproven Technology", description: "Some core technologies still in research phase with technical challenges to overcome." },
  { title: "Limited Funding", description: "Current runway requires additional funding rounds to reach key milestones." },
  { title: "Market Education", description: "Significant resources needed to educate potential customers about quantum advantages." }
];

const opportunities = [
  { title: "Market Growth", description: "Quantum computing market projected to grow at 30% CAGR through 2030." },
  { title: "First-mover Advantage", description: "Opportunity to establish QDaria as the leading quantum-AI integration platform." },
  { title: "Strategic Partnerships", description: "Potential for high-value partnerships with enterprise clients and research institutions." },
  { title: "Government Funding", description: "Access to $30B+ in government quantum research initiatives globally." }
];

const threats = [
  { title: "Incumbent Competition", description: "Established players with deep pockets are accelerating quantum computing investments." },
  { title: "Technical Risks", description: "Quantum decoherence and error correction remain significant technical challenges." },
  { title: "Market Adoption Barriers", description: "Enterprise customers may be hesitant to adopt early-stage quantum technologies." },
  { title: "Talent Competition", description: "Fierce competition for limited quantum computing talent pool." }
];
---

<EnhancedChartBase title={title} description={description}>
  <div class="enhanced-interactive-swot-chart" client:load>
    <!-- SWOT tabs -->
    <div class="swot-tabs">
      <button class="swot-tab active" data-category="all">All Categories</button>
      <button class="swot-tab" data-category="strengths">Strengths</button>
      <button class="swot-tab" data-category="weaknesses">Weaknesses</button>
      <button class="swot-tab" data-category="opportunities">Opportunities</button>
      <button class="swot-tab" data-category="threats">Threats</button>
    </div>
    
    <!-- Chart container -->
    <div class="chart-container">
      <svg width="100%" height="100%" viewBox="0 0 900 500" preserveAspectRatio="xMidYMid meet">
        <!-- Background -->
        <rect x="0" y="0" width="900" height="500" fill="#020617" rx="10" ry="10" />
        
        <!-- Chart title -->
        <text x="450" y="30" fill="white" font-size="18" text-anchor="middle" font-weight="bold" class="chart-title">
          QDaria SWOT Analysis
        </text>
        
        <!-- Quadrant dividers -->
        <line x1="450" y1="60" x2="450" y2="440" stroke="rgba(255, 255, 255, 0.3)" stroke-width="2" />
        <line x1="50" y1="250" x2="850" y2="250" stroke="rgba(255, 255, 255, 0.3)" stroke-width="2" />
        
        <!-- Quadrant labels -->
        <text x="225" y="80" text-anchor="middle" fill="#04a3ff" font-size="20" font-weight="bold" class="quadrant-label">Strengths</text>
        <text x="675" y="80" text-anchor="middle" fill="#00ffd3" font-size="20" font-weight="bold" class="quadrant-label">Opportunities</text>
        <text x="225" y="280" text-anchor="middle" fill="#ff6b6b" font-size="20" font-weight="bold" class="quadrant-label">Weaknesses</text>
        <text x="675" y="280" text-anchor="middle" fill="#ffcc00" font-size="20" font-weight="bold" class="quadrant-label">Threats</text>
        
        <!-- Quadrant backgrounds with glow effect -->
        <rect x="50" y="60" width="400" height="190" fill="url(#strengthsGradient)" class="quadrant-bg strengths-bg" rx="8" ry="8" />
        <rect x="450" y="60" width="400" height="190" fill="url(#opportunitiesGradient)" class="quadrant-bg opportunities-bg" rx="8" ry="8" />
        <rect x="50" y="250" width="400" height="190" fill="url(#weaknessesGradient)" class="quadrant-bg weaknesses-bg" rx="8" ry="8" />
        <rect x="450" y="250" width="400" height="190" fill="url(#threatsGradient)" class="quadrant-bg threats-bg" rx="8" ry="8" />
        
        <!-- Strengths items -->
        <g class="swot-category strengths-category">
          {strengths.map((item, i) => (
            <g class="swot-item strength" data-category="strengths" data-title={item.title} data-description={item.description}>
              <circle cx="100" cy={110 + i * 40} r="8" fill="#04a3ff" />
              <text x="120" y={115 + i * 40} fill="white" font-size="16" font-weight="500">{item.title}</text>
            </g>
          ))}
        </g>
        
        <!-- Weaknesses items -->
        <g class="swot-category weaknesses-category">
          {weaknesses.map((item, i) => (
            <g class="swot-item weakness" data-category="weaknesses" data-title={item.title} data-description={item.description}>
              <circle cx="100" cy={300 + i * 40} r="8" fill="#ff6b6b" />
              <text x="120" y={305 + i * 40} fill="white" font-size="16" font-weight="500">{item.title}</text>
            </g>
          ))}
        </g>
        
        <!-- Opportunities items -->
        <g class="swot-category opportunities-category">
          {opportunities.map((item, i) => (
            <g class="swot-item opportunity" data-category="opportunities" data-title={item.title} data-description={item.description}>
              <circle cx="500" cy={110 + i * 40} r="8" fill="#00ffd3" />
              <text x="520" y={115 + i * 40} fill="white" font-size="16" font-weight="500">{item.title}</text>
            </g>
          ))}
        </g>
        
        <!-- Threats items -->
        <g class="swot-category threats-category">
          {threats.map((item, i) => (
            <g class="swot-item threat" data-category="threats" data-title={item.title} data-description={item.description}>
              <circle cx="500" cy={300 + i * 40} r="8" fill="#ffcc00" />
              <text x="520" y={305 + i * 40} fill="white" font-size="16" font-weight="500">{item.title}</text>
            </g>
          ))}
        </g>
        
        <!-- Gradient definitions -->
        <defs>
          <linearGradient id="strengthsGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stop-color="#04a3ff" stop-opacity="0.15" />
            <stop offset="100%" stop-color="#04a3ff" stop-opacity="0.05" />
          </linearGradient>
          
          <linearGradient id="weaknessesGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stop-color="#ff6b6b" stop-opacity="0.15" />
            <stop offset="100%" stop-color="#ff6b6b" stop-opacity="0.05" />
          </linearGradient>
          
          <linearGradient id="opportunitiesGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stop-color="#00ffd3" stop-opacity="0.15" />
            <stop offset="100%" stop-color="#00ffd3" stop-opacity="0.05" />
          </linearGradient>
          
          <linearGradient id="threatsGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stop-color="#ffcc00" stop-opacity="0.15" />
            <stop offset="100%" stop-color="#ffcc00" stop-opacity="0.05" />
          </linearGradient>
        </defs>
      </svg>
      
      <!-- Detail panel -->
      <div class="swot-detail-panel">
        <div class="detail-header">
          <div class="detail-category"></div>
          <div class="detail-title"></div>
        </div>
        <div class="detail-description"></div>
        <div class="detail-actions">
          <button class="copy-button">Copy to Clipboard</button>
        </div>
      </div>
      
      <!-- Data table -->
      <div class="data-table-container">
        <button class="toggle-table-btn">Show Complete SWOT Table</button>
        <div class="data-table">
          <table>
            <thead>
              <tr>
                <th>Category</th>
                <th>Item</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody>
              {strengths.map((item) => (
                <tr class="strength-row">
                  <td>Strength</td>
                  <td>{item.title}</td>
                  <td>{item.description}</td>
                </tr>
              ))}
              {weaknesses.map((item) => (
                <tr class="weakness-row">
                  <td>Weakness</td>
                  <td>{item.title}</td>
                  <td>{item.description}</td>
                </tr>
              ))}
              {opportunities.map((item) => (
                <tr class="opportunity-row">
                  <td>Opportunity</td>
                  <td>{item.title}</td>
                  <td>{item.description}</td>
                </tr>
              ))}
              {threats.map((item) => (
                <tr class="threat-row">
                  <td>Threat</td>
                  <td>{item.title}</td>
                  <td>{item.description}</td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</EnhancedChartBase>

<style>
  .enhanced-interactive-swot-chart {
    position: relative;
    height: 750px;
    width: 100%;
    user-select: text;
  }
  
  .chart-container {
    position: relative;
    height: 500px;
    width: 100%;
    margin-top: 20px;
  }
  
  .swot-tabs {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 20px;
  }
  
  .swot-tab {
    background: rgba(4, 163, 255, 0.2);
    border: 1px solid rgba(4, 163, 255, 0.5);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .swot-tab:hover {
    background: rgba(4, 163, 255, 0.4);
    box-shadow: 0 0 15px rgba(4, 163, 255, 0.6);
  }
  
  .swot-tab.active {
    background: rgba(4, 163, 255, 0.6);
    box-shadow: 0 0 20px rgba(4, 163, 255, 0.8);
  }
  
  .quadrant-bg {
    opacity: 0.5;
    transition: all 0.3s ease;
  }
  
  .quadrant-bg:hover {
    opacity: 0.8;
    filter: brightness(1.2);
  }
  
  .swot-item {
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .swot-item:hover circle {
    r: 10;
    filter: brightness(1.3);
  }
  
  .swot-item:hover text {
    font-weight: bold;
    filter: brightness(1.2);
  }
  
  .swot-detail-panel {
    position: relative;
    margin-top: 20px;
    padding: 15px;
    background: rgba(4, 163, 255, 0.1);
    border: 1px solid rgba(4, 163, 255, 0.3);
    border-radius: 8px;
    color: white;
    min-height: 120px;
    transition: all 0.3s ease;
  }
  
  .detail-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 10px;
  }
  
  .detail-category {
    font-size: 14px;
    font-weight: bold;
    padding: 3px 8px;
    border-radius: 4px;
    background: rgba(4, 163, 255, 0.3);
  }
  
  .detail-title {
    font-size: 18px;
    font-weight: bold;
  }
  
  .detail-description {
    font-size: 15px;
    line-height: 1.5;
    margin-bottom: 15px;
  }
  
  .detail-actions {
    display: flex;
    justify-content: flex-end;
  }
  
  .copy-button {
    background: rgba(4, 163, 255, 0.3);
    border: 1px solid rgba(4, 163, 255, 0.5);
    color: white;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .copy-button:hover {
    background: rgba(4, 163, 255, 0.5);
    box-shadow: 0 0 10px rgba(4, 163, 255, 0.4);
  }
  
  .data-table-container {
    margin-top: 20px;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .toggle-table-btn {
    background: rgba(4, 163, 255, 0.3);
    border: 1px solid rgba(4, 163, 255, 0.5);
    color: white;
    padding: 8px 16px;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 10px;
  }
  
  .toggle-table-btn:hover {
    background: rgba(4, 163, 255, 0.5);
    box-shadow: 0 0 15px rgba(4, 163, 255, 0.6);
  }
  
  .data-table {
    width: 100%;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease;
  }
  
  .data-table.visible {
    max-height: 500px;
    overflow-y: auto;
  }
  
  .data-table table {
    width: 100%;
    border-collapse: collapse;
    color: white;
    background: rgba(2, 6, 23, 0.7);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .data-table th, .data-table td {
    padding: 10px;
    text-align: left;
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
  
  .data-table th {
    background: rgba(4, 163, 255, 0.3);
    font-weight: bold;
  }
  
  .strength-row td:first-child {
    color: #04a3ff;
    font-weight: bold;
  }
  
  .weakness-row td:first-child {
    color: #ff6b6b;
    font-weight: bold;
  }
  
  .opportunity-row td:first-child {
    color: #00ffd3;
    font-weight: bold;
  }
  
  .threat-row td:first-child {
    color: #ffcc00;
    font-weight: bold;
  }
  
  .data-table tr:hover {
    background: rgba(4, 163, 255, 0.1);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Get elements
    const swotTabs = document.querySelectorAll('.swot-tab');
    const swotCategories = document.querySelectorAll('.swot-category');
    const swotItems = document.querySelectorAll('.swot-item');
    const detailPanel = document.querySelector('.swot-detail-panel');
    const detailCategory = document.querySelector('.detail-category');
    const detailTitle = document.querySelector('.detail-title');
    const detailDescription = document.querySelector('.detail-description');
    const copyButton = document.querySelector('.copy-button');
    const toggleTableBtn = document.querySelector('.toggle-table-btn');
    const dataTable = document.querySelector('.data-table');
    
    // Set default detail panel content
    detailCategory.textContent = 'Select an item';
    detailTitle.textContent = 'Click on any SWOT item for details';
    detailDescription.textContent = 'The SWOT analysis highlights QDaria\'s key internal strengths and weaknesses, as well as external opportunities and threats in the quantum computing market.';
    
    // Initialize with all categories
    showCategory('all');
    
    // Add event listeners to category tabs
    swotTabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Remove active class from all tabs
        swotTabs.forEach(t => t.classList.remove('active'));
        
        // Add active class to clicked tab
        tab.classList.add('active');
        
        // Show selected category
        const category = tab.dataset.category;
        showCategory(category);
      });
    });
    
    // Add event listeners to SWOT items
    swotItems.forEach(item => {
      item.addEventListener('click', () => {
        showDetails(item);
      });
      
      // Make items focusable
      item.setAttribute('tabindex', '0');
      
      // Add keyboard support
      item.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          showDetails(item);
        }
      });
    });
    
    // Copy button functionality
    copyButton.addEventListener('click', () => {
      const textToCopy = `${detailCategory.textContent}: ${detailTitle.textContent}\n${detailDescription.textContent}`;
      navigator.clipboard.writeText(textToCopy).then(() => {
        const originalText = copyButton.textContent;
        copyButton.textContent = 'Copied!';
        setTimeout(() => {
          copyButton.textContent = originalText;
        }, 2000);
      });
    });
    
    // Toggle data table
    toggleTableBtn.addEventListener('click', () => {
      dataTable.classList.toggle('visible');
      toggleTableBtn.textContent = dataTable.classList.contains('visible') ? 'Hide Complete SWOT Table' : 'Show Complete SWOT Table';
    });
    
    // Function to show selected category
    function showCategory(category) {
      if (category === 'all') {
        // Show all categories
        swotCategories.forEach(cat => {
          cat.style.display = 'block';
          cat.style.opacity = '1';
        });
        
        // Show all quadrant backgrounds
        document.querySelectorAll('.quadrant-bg').forEach(bg => {
          bg.style.display = 'block';
          bg.style.opacity = '0.5';
        });
      } else {
        // Show only selected category
        swotCategories.forEach(cat => {
          if (cat.classList.contains(`${category}-category`)) {
            cat.style.display = 'block';
            cat.style.opacity = '1';
          } else {
            cat.style.display = 'none';
            cat.style.opacity = '0';
          }
        });
        
        // Show only selected quadrant background
        document.querySelectorAll('.quadrant-bg').forEach(bg => {
          if (bg.classList.contains(`${category}-bg`)) {
            bg.style.display = 'block';
            bg.style.opacity = '0.7';
          } else {
            bg.style.display = 'none';
            bg.style.opacity = '0';
          }
        });
      }
    }
    
    // Function to show details for selected item
    function showDetails(item) {
      const category = item.dataset.category;
      const title = item.dataset.title;
      const description = item.dataset.description;
      
      // Update detail panel content
      detailCategory.textContent = category.charAt(0).toUpperCase() + category.slice(1, -1);
      detailTitle.textContent = title;
      detailDescription.textContent = description;
      
      // Update detail panel styling based on category
      detailPanel.style.borderColor = getCategoryColor(category, 0.5);
      detailPanel.style.background = getCategoryColor(category, 0.1);
      detailCategory.style.background = getCategoryColor(category, 0.3);
      detailCategory.style.color = getCategoryColor(category, 1);
    }
    
    // Helper function to get color for category
    function getCategoryColor(category, opacity) {
      let color;
      
      switch(category) {
        case 'strengths':
          color = `rgba(4, 163, 255, ${opacity})`;
          break;
        case 'weaknesses':
          color = `rgba(255, 107, 107, ${opacity})`;
          break;
        case 'opportunities':
          color = `rgba(0, 255, 211, ${opacity})`;
          break;
        case 'threats':
          color = `rgba(255, 204, 0, ${opacity})`;
          break;
        default:
          color = `rgba(4, 163, 255, ${opacity})`;
      }
      
      return color;
    }
  });
</script>
