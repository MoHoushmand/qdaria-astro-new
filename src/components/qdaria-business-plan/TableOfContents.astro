---
const toc = [
  {
    title: "Executive Summary",
    items: [
      "Company Overview",
      "Mission and Vision",
      "Value Proposition"
    ]
  },
  {
    title: "Market Analysis & Competitive Landscape",
    items: [
      "Market Overview",
      "Market Size & Growth Projections",
      "Target Markets & Applications",
      "Competitive Analysis",
      "SWOT Analysis"
    ]
  },
  {
    title: "Technology & Product Development",
    items: [
      "Core Technology",
      "Products and Solutions",
      "Product Roadmap"
    ]
  },
  {
    title: "Financial Projections & Funding",
    items: [
      "Revenue Streams",
      "Funding Requirements",
      "Financial Projections",
      "Key Financial Metrics",
      "Revenue & Profitability Analysis"
    ]
  },
  {
    title: "Risk Analysis & Mitigation",
    items: [
      "Technical Risks",
      "Market Risks",
      "Operational Risks",
      "Risk Assessment Visualization"
    ]
  },
  {
    title: "Strategic Execution Timeline",
    items: [
      "Implementation Phases",
      "Milestones & Key Dates"
    ]
  },
  {
    title: "Exit Strategy",
    items: [
      "IPO Timeline",
      "Subsidiary Structure"
    ]
  },
  {
    title: "Conclusion",
    items: [
      "Key Investment Highlights"
    ]
  }
];
---

<div class="feature-card rounded-xl p-8 transition-transform duration-300 hover:scale-105 mb-12">
  <h2 class="text-gradient-blue mb-8 text-3xl font-bold">Table of Contents</h2>
  <nav class="toc">
    <ol class="space-y-4">
      {toc.map((section, index) => (
        <li>
          <a href={`#${section.title.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`} class="text-lg font-semibold text-white hover:text-primary-400 transition-colors">
            {index + 1}. {section.title}
          </a>
          {section.items.length > 0 && (
            <ul class="mt-2 ml-6 space-y-2">
              {section.items.map(item => (
                <li>
                  <a href={`#${item.toLowerCase().replace(/[^a-z0-9]+/g, '-')}`} class="text-base-300 hover:text-primary-400 transition-colors">
                    â€¢ {item}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </li>
      ))}
    </ol>
  </nav>
</div>

<style>
  .feature-card {
    @apply relative rounded-2xl border border-primary-500/30 bg-dark-bg/80 backdrop-blur-sm transition-all duration-500 overflow-visible;
    box-shadow: 0 0 25px rgba(4, 163, 255, 0.4);

    &:hover {
      box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      transform: translateY(-4px) scale(1.02);
      @apply border-primary-500/50 bg-dark-bg/90;
      animation: pulse-card 2s ease-in-out infinite;
    }

    @keyframes pulse-card {
      0%,
      100% {
        box-shadow: 0 0 50px rgba(4, 163, 255, 0.6);
      }
      50% {
        box-shadow: 0 0 70px rgba(4, 163, 255, 0.8);
      }
    }

    &::before {
      content: "";
      @apply absolute inset-0 rounded-2xl;
      background: radial-gradient(
        800px circle at var(--mouse-x, 0) var(--mouse-y, 0),
        rgba(4, 163, 255, 0.15),
        transparent 40%
      );
      opacity: 0;
      transition: opacity 0.5s;
    }

    &:hover::before {
      opacity: 1;
    }
  }

  .text-gradient-blue {
    @apply bg-gradient-to-r from-[#04a3ff] via-[#00ffd3] to-[#65ff00] bg-clip-text text-transparent;
    filter: brightness(1.8) saturate(1.4);
    text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    animation: pulse-gradient 4s ease-in-out infinite;
  }

  @keyframes pulse-gradient {
    0%,
    100% {
      filter: brightness(1.8) saturate(1.4);
      text-shadow: 0 0 30px rgba(4, 163, 255, 0.4);
    }
    50% {
      filter: brightness(2) saturate(1.6);
      text-shadow: 0 0 40px rgba(4, 163, 255, 0.5);
    }
  }
</style>

<script>
  // Add mouse tracking for hover effect
  document.querySelectorAll('.feature-card').forEach((card) => {
    card.addEventListener('mousemove', (e: Event) => {
      const mouseEvent = e as MouseEvent;
      const rect = (card as HTMLElement).getBoundingClientRect();
      const x = mouseEvent.clientX - rect.left;
      const y = mouseEvent.clientY - rect.top;
      (card as HTMLElement).style.setProperty('--mouse-x', `${x}px`);
      (card as HTMLElement).style.setProperty('--mouse-y', `${y}px`);
    });
  });
</script>
